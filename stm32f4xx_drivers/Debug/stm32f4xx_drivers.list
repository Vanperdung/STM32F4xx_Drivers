
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002120  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080022d0  080022d0  000122d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002434  08002434  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002434  08002434  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002434  08002434  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002434  08002434  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800243c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00000064  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000301c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000963  00000000  00000000  000230c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00023a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001f0  00000000  00000000  00023c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032ec  00000000  00000000  00023e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b7e  00000000  00000000  0002714c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b220  00000000  00000000  00029cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00034eea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001140  00000000  00000000  00034f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         0000009c  00000000  00000000  00036080  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000014d  00000000  00000000  0003611c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080022b8 	.word	0x080022b8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	080022b8 	.word	0x080022b8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ds1307_init_current>:
char *get_day_of_week(uint8_t count);
char *date_to_string(RTC_date_t *current_date);
char *time_to_string(RTC_time_t *current_time);

void ds1307_init_current(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
    current_date.day = SUNDAY;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <ds1307_init_current+0x44>)
 8000296:	2201      	movs	r2, #1
 8000298:	70da      	strb	r2, [r3, #3]
    current_date.date = 9;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <ds1307_init_current+0x44>)
 800029c:	2209      	movs	r2, #9
 800029e:	701a      	strb	r2, [r3, #0]
    current_date.month = 1;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <ds1307_init_current+0x44>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	705a      	strb	r2, [r3, #1]
    current_date.year = 22;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <ds1307_init_current+0x44>)
 80002a8:	2216      	movs	r2, #22
 80002aa:	709a      	strb	r2, [r3, #2]

    current_time.seconds = 0;
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <ds1307_init_current+0x48>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
    current_time.minutes = 52;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <ds1307_init_current+0x48>)
 80002b4:	2234      	movs	r2, #52	; 0x34
 80002b6:	705a      	strb	r2, [r3, #1]
    current_time.hours = 10;
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <ds1307_init_current+0x48>)
 80002ba:	220a      	movs	r2, #10
 80002bc:	709a      	strb	r2, [r3, #2]
    current_time.time_format = TIME_FORMAT_12HRS_PM;
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <ds1307_init_current+0x48>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	70da      	strb	r2, [r3, #3]

    ds1307_set_current_date(&current_date);
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <ds1307_init_current+0x44>)
 80002c6:	f000 fad4 	bl	8000872 <ds1307_set_current_date>
    ds1307_set_current_time(&current_time);
 80002ca:	4803      	ldr	r0, [pc, #12]	; (80002d8 <ds1307_init_current+0x48>)
 80002cc:	f000 fa36 	bl	800073c <ds1307_set_current_time>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200000a0 	.word	0x200000a0
 80002d8:	200000a4 	.word	0x200000a4

080002dc <main>:

int main(void)
{
 80002dc:	b590      	push	{r4, r7, lr}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
    char *format;
    printf("RTC test\n");
 80002e2:	4823      	ldr	r0, [pc, #140]	; (8000370 <main+0x94>)
 80002e4:	f001 f864 	bl	80013b0 <puts>

    if(ds1307_init() != 0)
 80002e8:	f000 fa00 	bl	80006ec <ds1307_init>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d003      	beq.n	80002fa <main+0x1e>
    {
        printf("RTC init has failed\n");
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <main+0x98>)
 80002f4:	f001 f85c 	bl	80013b0 <puts>
        while(1);
 80002f8:	e7fe      	b.n	80002f8 <main+0x1c>
    }
    ds1307_init_current();
 80002fa:	f7ff ffc9 	bl	8000290 <ds1307_init_current>

    ds1307_get_current_date(&current_date);
 80002fe:	481e      	ldr	r0, [pc, #120]	; (8000378 <main+0x9c>)
 8000300:	f000 fae7 	bl	80008d2 <ds1307_get_current_date>
    ds1307_get_current_time(&current_time);
 8000304:	481d      	ldr	r0, [pc, #116]	; (800037c <main+0xa0>)
 8000306:	f000 fa62 	bl	80007ce <ds1307_get_current_time>

    if(current_time.time_format != TIME_FORMAT_24HRS)
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <main+0xa0>)
 800030c:	78db      	ldrb	r3, [r3, #3]
 800030e:	2b02      	cmp	r3, #2
 8000310:	d011      	beq.n	8000336 <main+0x5a>
    {
        format = (current_time.time_format) ? "PM" : "AM";
 8000312:	4b1a      	ldr	r3, [pc, #104]	; (800037c <main+0xa0>)
 8000314:	78db      	ldrb	r3, [r3, #3]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <main+0x42>
 800031a:	4b19      	ldr	r3, [pc, #100]	; (8000380 <main+0xa4>)
 800031c:	e000      	b.n	8000320 <main+0x44>
 800031e:	4b19      	ldr	r3, [pc, #100]	; (8000384 <main+0xa8>)
 8000320:	607b      	str	r3, [r7, #4]
        printf("Current time = %s %s\n", time_to_string(&current_time), format);
 8000322:	4816      	ldr	r0, [pc, #88]	; (800037c <main+0xa0>)
 8000324:	f000 f872 	bl	800040c <time_to_string>
 8000328:	4603      	mov	r3, r0
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	4619      	mov	r1, r3
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <main+0xac>)
 8000330:	f000 ffb8 	bl	80012a4 <iprintf>
 8000334:	e007      	b.n	8000346 <main+0x6a>
    }
    else
    {
        printf("Current time = %s\n", time_to_string(&current_time));
 8000336:	4811      	ldr	r0, [pc, #68]	; (800037c <main+0xa0>)
 8000338:	f000 f868 	bl	800040c <time_to_string>
 800033c:	4603      	mov	r3, r0
 800033e:	4619      	mov	r1, r3
 8000340:	4812      	ldr	r0, [pc, #72]	; (800038c <main+0xb0>)
 8000342:	f000 ffaf 	bl	80012a4 <iprintf>
    }

    printf("Current date = %s <%s>\n", date_to_string(&current_date), get_day_of_week(current_date.day));
 8000346:	480c      	ldr	r0, [pc, #48]	; (8000378 <main+0x9c>)
 8000348:	f000 f889 	bl	800045e <date_to_string>
 800034c:	4604      	mov	r4, r0
 800034e:	4b0a      	ldr	r3, [pc, #40]	; (8000378 <main+0x9c>)
 8000350:	78db      	ldrb	r3, [r3, #3]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f8ac 	bl	80004b0 <get_day_of_week>
 8000358:	4603      	mov	r3, r0
 800035a:	461a      	mov	r2, r3
 800035c:	4621      	mov	r1, r4
 800035e:	480c      	ldr	r0, [pc, #48]	; (8000390 <main+0xb4>)
 8000360:	f000 ffa0 	bl	80012a4 <iprintf>

    return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	bd90      	pop	{r4, r7, pc}
 800036e:	bf00      	nop
 8000370:	08002314 	.word	0x08002314
 8000374:	08002320 	.word	0x08002320
 8000378:	200000a0 	.word	0x200000a0
 800037c:	200000a4 	.word	0x200000a4
 8000380:	08002334 	.word	0x08002334
 8000384:	08002338 	.word	0x08002338
 8000388:	0800233c 	.word	0x0800233c
 800038c:	08002354 	.word	0x08002354
 8000390:	08002368 	.word	0x08002368

08000394 <number_to_string>:

void number_to_string(uint8_t num, char *buf)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	4603      	mov	r3, r0
 800039c:	6039      	str	r1, [r7, #0]
 800039e:	71fb      	strb	r3, [r7, #7]
    if(num < 10)
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	2b09      	cmp	r3, #9
 80003a4:	d809      	bhi.n	80003ba <number_to_string+0x26>
    {
        buf[0] = '0';
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	2230      	movs	r2, #48	; 0x30
 80003aa:	701a      	strb	r2, [r3, #0]
        buf[1] = num + 48;
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	3301      	adds	r3, #1
 80003b0:	79fa      	ldrb	r2, [r7, #7]
 80003b2:	3230      	adds	r2, #48	; 0x30
 80003b4:	b2d2      	uxtb	r2, r2
 80003b6:	701a      	strb	r2, [r3, #0]
    else if(num >= 10 && num < 99)
    {
        buf[0] = (num / 10) + 48;
        buf[1] = (num % 10) + 48;
    }
}
 80003b8:	e01f      	b.n	80003fa <number_to_string+0x66>
    else if(num >= 10 && num < 99)
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	2b09      	cmp	r3, #9
 80003be:	d91c      	bls.n	80003fa <number_to_string+0x66>
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	2b62      	cmp	r3, #98	; 0x62
 80003c4:	d819      	bhi.n	80003fa <number_to_string+0x66>
        buf[0] = (num / 10) + 48;
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	4a0f      	ldr	r2, [pc, #60]	; (8000408 <number_to_string+0x74>)
 80003ca:	fba2 2303 	umull	r2, r3, r2, r3
 80003ce:	08db      	lsrs	r3, r3, #3
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	3330      	adds	r3, #48	; 0x30
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	701a      	strb	r2, [r3, #0]
        buf[1] = (num % 10) + 48;
 80003da:	79fa      	ldrb	r2, [r7, #7]
 80003dc:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <number_to_string+0x74>)
 80003de:	fba3 1302 	umull	r1, r3, r3, r2
 80003e2:	08d9      	lsrs	r1, r3, #3
 80003e4:	460b      	mov	r3, r1
 80003e6:	009b      	lsls	r3, r3, #2
 80003e8:	440b      	add	r3, r1
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	1ad3      	subs	r3, r2, r3
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	3301      	adds	r3, #1
 80003f4:	3230      	adds	r2, #48	; 0x30
 80003f6:	b2d2      	uxtb	r2, r2
 80003f8:	701a      	strb	r2, [r3, #0]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	cccccccd 	.word	0xcccccccd

0800040c <time_to_string>:

char *time_to_string(RTC_time_t *current_time)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    char buf[9];
    buf[2] = ':';
 8000414:	233a      	movs	r3, #58	; 0x3a
 8000416:	73bb      	strb	r3, [r7, #14]
    buf[5] = ':';
 8000418:	233a      	movs	r3, #58	; 0x3a
 800041a:	747b      	strb	r3, [r7, #17]

    number_to_string(current_time->hours, buf);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	789b      	ldrb	r3, [r3, #2]
 8000420:	f107 020c 	add.w	r2, r7, #12
 8000424:	4611      	mov	r1, r2
 8000426:	4618      	mov	r0, r3
 8000428:	f7ff ffb4 	bl	8000394 <number_to_string>
    number_to_string(current_time->minutes, &buf[3]);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	785a      	ldrb	r2, [r3, #1]
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	3303      	adds	r3, #3
 8000436:	4619      	mov	r1, r3
 8000438:	4610      	mov	r0, r2
 800043a:	f7ff ffab 	bl	8000394 <number_to_string>
    number_to_string(current_time->seconds, &buf[6]);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	3306      	adds	r3, #6
 8000448:	4619      	mov	r1, r3
 800044a:	4610      	mov	r0, r2
 800044c:	f7ff ffa2 	bl	8000394 <number_to_string>
    buf[8] = '\0';
 8000450:	2300      	movs	r3, #0
 8000452:	753b      	strb	r3, [r7, #20]

    return buf;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3718      	adds	r7, #24
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <date_to_string>:

char *date_to_string(RTC_date_t *current_date)
{
 800045e:	b580      	push	{r7, lr}
 8000460:	b086      	sub	sp, #24
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
    char buf[9];
    buf[2] = '/';
 8000466:	232f      	movs	r3, #47	; 0x2f
 8000468:	73bb      	strb	r3, [r7, #14]
    buf[5] = '/';
 800046a:	232f      	movs	r3, #47	; 0x2f
 800046c:	747b      	strb	r3, [r7, #17]
    
    number_to_string(current_date->date, buf);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	f107 020c 	add.w	r2, r7, #12
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f7ff ff8b 	bl	8000394 <number_to_string>
    number_to_string(current_date->month, &buf[3]);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	785a      	ldrb	r2, [r3, #1]
 8000482:	f107 030c 	add.w	r3, r7, #12
 8000486:	3303      	adds	r3, #3
 8000488:	4619      	mov	r1, r3
 800048a:	4610      	mov	r0, r2
 800048c:	f7ff ff82 	bl	8000394 <number_to_string>
    number_to_string(current_date->year, &buf[6]);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	789a      	ldrb	r2, [r3, #2]
 8000494:	f107 030c 	add.w	r3, r7, #12
 8000498:	3306      	adds	r3, #6
 800049a:	4619      	mov	r1, r3
 800049c:	4610      	mov	r0, r2
 800049e:	f7ff ff79 	bl	8000394 <number_to_string>

    buf[8] = '\0';
 80004a2:	2300      	movs	r3, #0
 80004a4:	753b      	strb	r3, [r7, #20]
    
    return buf;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3718      	adds	r7, #24
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <get_day_of_week>:

char *get_day_of_week(uint8_t count)
{
 80004b0:	b4b0      	push	{r4, r5, r7}
 80004b2:	b08b      	sub	sp, #44	; 0x2c
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
    char *days[] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <get_day_of_week+0x38>)
 80004bc:	f107 040c 	add.w	r4, r7, #12
 80004c0:	461d      	mov	r5, r3
 80004c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    return days[count - 1];
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	3b01      	subs	r3, #1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80004d8:	4413      	add	r3, r2
 80004da:	f853 3c1c 	ldr.w	r3, [r3, #-28]
}
 80004de:	4618      	mov	r0, r3
 80004e0:	372c      	adds	r7, #44	; 0x2c
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bcb0      	pop	{r4, r5, r7}
 80004e6:	4770      	bx	lr
 80004e8:	08002380 	.word	0x08002380

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	; (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	; (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	; (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f000 fe97 	bl	800124c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fedd 	bl	80002dc <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000530:	0800243c 	.word	0x0800243c
  ldr r2, =_sbss
 8000534:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000538:	200000dc 	.word	0x200000dc

0800053c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <ds1307_i2c_pin_config>:
#include <string.h>

I2C_Handle_t ds1307_I2CHandle;

static void ds1307_i2c_pin_config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b086      	sub	sp, #24
 8000544:	af00      	add	r7, sp, #0
    GPIO_Handle_t i2c_sda, i2c_scl;

    memset(&i2c_sda, 0, sizeof(i2c_sda));
 8000546:	f107 030c 	add.w	r3, r7, #12
 800054a:	220c      	movs	r2, #12
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fea0 	bl	8001294 <memset>
    memset(&i2c_scl, 0, sizeof(i2c_scl));
 8000554:	463b      	mov	r3, r7
 8000556:	220c      	movs	r2, #12
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fe9a 	bl	8001294 <memset>

    i2c_sda.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <ds1307_i2c_pin_config+0x74>)
 8000562:	60fb      	str	r3, [r7, #12]
    i2c_sda.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SDA_PIN;
 8000564:	2307      	movs	r3, #7
 8000566:	743b      	strb	r3, [r7, #16]
    i2c_sda.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000568:	2302      	movs	r3, #2
 800056a:	747b      	strb	r3, [r7, #17]
    i2c_sda.GPIO_PinConfig.GPIO_PinAltFunMode = AF4;
 800056c:	2304      	movs	r3, #4
 800056e:	757b      	strb	r3, [r7, #21]
    i2c_sda.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000570:	2301      	movs	r3, #1
 8000572:	753b      	strb	r3, [r7, #20]
    i2c_sda.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 8000574:	2301      	movs	r3, #1
 8000576:	74fb      	strb	r3, [r7, #19]
    i2c_sda.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000578:	2302      	movs	r3, #2
 800057a:	74bb      	strb	r3, [r7, #18]
    GPIO_Init(&i2c_sda);
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f9db 	bl	800093c <GPIO_Init>

    i2c_scl.pGPIOx = DS1307_I2C_GPIO_PORT;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <ds1307_i2c_pin_config+0x74>)
 8000588:	603b      	str	r3, [r7, #0]
    i2c_scl.GPIO_PinConfig.GPIO_PinNumber = DS1307_I2C_SCL_PIN;
 800058a:	2308      	movs	r3, #8
 800058c:	713b      	strb	r3, [r7, #4]
    i2c_scl.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800058e:	2302      	movs	r3, #2
 8000590:	717b      	strb	r3, [r7, #5]
    i2c_scl.GPIO_PinConfig.GPIO_PinAltFunMode = AF4;
 8000592:	2304      	movs	r3, #4
 8000594:	727b      	strb	r3, [r7, #9]
    i2c_scl.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000596:	2301      	movs	r3, #1
 8000598:	723b      	strb	r3, [r7, #8]
    i2c_scl.GPIO_PinConfig.GPIO_PinPuPdControl = DS1307_I2C_PUPD;
 800059a:	2301      	movs	r3, #1
 800059c:	71fb      	strb	r3, [r7, #7]
    i2c_scl.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800059e:	2302      	movs	r3, #2
 80005a0:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(&i2c_scl);
 80005a2:	463b      	mov	r3, r7
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f9c9 	bl	800093c <GPIO_Init>
}
 80005aa:	bf00      	nop
 80005ac:	3718      	adds	r7, #24
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40020400 	.word	0x40020400

080005b8 <ds1307_i2c_config>:

static void ds1307_i2c_config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
    ds1307_I2CHandle.pI2Cx = DS1307_I2C;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <ds1307_i2c_config+0x20>)
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <ds1307_i2c_config+0x24>)
 80005c0:	601a      	str	r2, [r3, #0]
    ds1307_I2CHandle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <ds1307_i2c_config+0x20>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	719a      	strb	r2, [r3, #6]
    ds1307_I2CHandle.I2C_Config.I2C_SCLSpeed = DS1307_I2C_SPEED;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <ds1307_i2c_config+0x20>)
 80005ca:	22a0      	movs	r2, #160	; 0xa0
 80005cc:	711a      	strb	r2, [r3, #4]
    I2C_Init(&ds1307_I2CHandle);
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ds1307_i2c_config+0x20>)
 80005d0:	f000 fc72 	bl	8000eb8 <I2C_Init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000a8 	.word	0x200000a8
 80005dc:	40005400 	.word	0x40005400

080005e0 <ds1307_write>:

static void ds1307_write(uint8_t vaule, uint8_t reg_addr)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2];
    tx[0] = reg_addr;
 80005f0:	79bb      	ldrb	r3, [r7, #6]
 80005f2:	733b      	strb	r3, [r7, #12]
    tx[1] = vaule;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	737b      	strb	r3, [r7, #13]
    I2C_MasterSendData(&ds1307_I2CHandle, tx, 2, DS1307_SLAVE_ADDR, I2C_DISABLE_SR);
 80005f8:	f107 010c 	add.w	r1, r7, #12
 80005fc:	2300      	movs	r3, #0
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2368      	movs	r3, #104	; 0x68
 8000602:	2202      	movs	r2, #2
 8000604:	4803      	ldr	r0, [pc, #12]	; (8000614 <ds1307_write+0x34>)
 8000606:	f000 fccf 	bl	8000fa8 <I2C_MasterSendData>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200000a8 	.word	0x200000a8

08000618 <ds1307_read>:

static uint8_t ds1307_read(uint8_t reg_addr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    I2C_MasterSendData(&ds1307_I2CHandle, &reg_addr, 1, DS1307_SLAVE_ADDR, I2C_ENABLE_SR);
 8000622:	1df9      	adds	r1, r7, #7
 8000624:	2301      	movs	r3, #1
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2368      	movs	r3, #104	; 0x68
 800062a:	2201      	movs	r2, #1
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <ds1307_read+0x38>)
 800062e:	f000 fcbb 	bl	8000fa8 <I2C_MasterSendData>
    I2C_MasterReceiveData(&ds1307_I2CHandle, &rx, 1, DS1307_SLAVE_ADDR, I2C_DISABLE_SR);
 8000632:	f107 010f 	add.w	r1, r7, #15
 8000636:	2300      	movs	r3, #0
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2368      	movs	r3, #104	; 0x68
 800063c:	2201      	movs	r2, #1
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <ds1307_read+0x38>)
 8000640:	f000 fd11 	bl	8001066 <I2C_MasterReceiveData>
    return rx;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	200000a8 	.word	0x200000a8

08000654 <binary_to_bcd>:

static uint8_t binary_to_bcd(uint8_t time)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
    uint8_t unit = 0, teen = 0, bcd;
 800065e:	2300      	movs	r3, #0
 8000660:	73bb      	strb	r3, [r7, #14]
 8000662:	2300      	movs	r3, #0
 8000664:	737b      	strb	r3, [r7, #13]
    if(time >= 10)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	2b09      	cmp	r3, #9
 800066a:	d919      	bls.n	80006a0 <binary_to_bcd+0x4c>
    {
        unit = time % 10;
 800066c:	79fa      	ldrb	r2, [r7, #7]
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <binary_to_bcd+0x60>)
 8000670:	fba3 1302 	umull	r1, r3, r3, r2
 8000674:	08d9      	lsrs	r1, r3, #3
 8000676:	460b      	mov	r3, r1
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	440b      	add	r3, r1
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	1ad3      	subs	r3, r2, r3
 8000680:	73bb      	strb	r3, [r7, #14]
        teen = time / 10;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	4a0b      	ldr	r2, [pc, #44]	; (80006b4 <binary_to_bcd+0x60>)
 8000686:	fba2 2303 	umull	r2, r3, r2, r3
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	737b      	strb	r3, [r7, #13]
        bcd = (uint8_t)((unit << 4) | teen);
 800068e:	7bbb      	ldrb	r3, [r7, #14]
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	b25a      	sxtb	r2, r3
 8000694:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000698:	4313      	orrs	r3, r2
 800069a:	b25b      	sxtb	r3, r3
 800069c:	73fb      	strb	r3, [r7, #15]
 800069e:	e001      	b.n	80006a4 <binary_to_bcd+0x50>
    }
    else
    {
        bcd = time;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	73fb      	strb	r3, [r7, #15]
    }
    return bcd;
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	cccccccd 	.word	0xcccccccd

080006b8 <bcd_to_binary>:

static uint8_t bcd_to_binary(uint8_t time)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
    uint8_t binary;
    binary = ((uint8_t)(time >> 4) * 10 + (time & (uint8_t)0x0F));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	461a      	mov	r2, r3
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	f003 030f 	and.w	r3, r3, #15
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4413      	add	r3, r2
 80006dc:	73fb      	strb	r3, [r7, #15]
    return binary;
 80006de:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <ds1307_init>:

uint8_t ds1307_init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
    uint8_t clock_state;

    // 1. Init the I2C pins
    ds1307_i2c_pin_config();   
 80006f2:	f7ff ff25 	bl	8000540 <ds1307_i2c_pin_config>
    // 2. Initialize the I2C peripheral
    ds1307_i2c_config();
 80006f6:	f7ff ff5f 	bl	80005b8 <ds1307_i2c_config>
    // 3. Enable the I2C peripheral
    I2C_PeripheralControl(ds1307_I2CHandle.pI2Cx, ENABLE);
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <ds1307_init+0x4c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2101      	movs	r1, #1
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fbbd 	bl	8000e80 <I2C_PeripheralControl>
    ds1307_I2CHandle.pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <ds1307_init+0x4c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <ds1307_init+0x4c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000714:	601a      	str	r2, [r3, #0]
    // 4. Make clock halt = 0
    ds1307_write(0x00, DS1307_ADDR_SECOND);
 8000716:	2100      	movs	r1, #0
 8000718:	2000      	movs	r0, #0
 800071a:	f7ff ff61 	bl	80005e0 <ds1307_write>
    // 5. Read back clock halt bit
    clock_state = ds1307_read(DS1307_ADDR_SECOND);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff ff7a 	bl	8000618 <ds1307_read>
 8000724:	4603      	mov	r3, r0
 8000726:	71fb      	strb	r3, [r7, #7]

    return ((clock_state >> 7) & 0x1);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	09db      	lsrs	r3, r3, #7
 800072c:	b2db      	uxtb	r3, r3

}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000a8 	.word	0x200000a8

0800073c <ds1307_set_current_time>:

// Function prototypes
void ds1307_set_current_time(RTC_time_t *rtc_time)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    uint8_t seconds, hours;
    seconds = binary_to_bcd(rtc_time->seconds);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff83 	bl	8000654 <binary_to_bcd>
 800074e:	4603      	mov	r3, r0
 8000750:	73bb      	strb	r3, [r7, #14]
    seconds &= ~(1 << 7);
 8000752:	7bbb      	ldrb	r3, [r7, #14]
 8000754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000758:	73bb      	strb	r3, [r7, #14]
    ds1307_write(seconds, DS1307_ADDR_SECOND);
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff3e 	bl	80005e0 <ds1307_write>
    ds1307_write(binary_to_bcd(rtc_time->minutes), DS1307_ADDR_MINUTE);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ff73 	bl	8000654 <binary_to_bcd>
 800076e:	4603      	mov	r3, r0
 8000770:	2101      	movs	r1, #1
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ff34 	bl	80005e0 <ds1307_write>
    hours = binary_to_bcd(rtc_time->hours);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	789b      	ldrb	r3, [r3, #2]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff69 	bl	8000654 <binary_to_bcd>
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]
    if(rtc_time->time_format == TIME_FORMAT_24HRS)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	78db      	ldrb	r3, [r3, #3]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d104      	bne.n	8000798 <ds1307_set_current_time+0x5c>
    {
        hours &= ~(1 << 6);
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e011      	b.n	80007bc <ds1307_set_current_time+0x80>
    }
    else 
    {
        hours |= (1 << 6);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800079e:	73fb      	strb	r3, [r7, #15]
        hours = (rtc_time->time_format == TIME_FORMAT_12HRS_PM) ? (hours | (1 << 5)) : (hours & ~(1 << 5));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	78db      	ldrb	r3, [r3, #3]
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d104      	bne.n	80007b2 <ds1307_set_current_time+0x76>
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	f043 0320 	orr.w	r3, r3, #32
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	e003      	b.n	80007ba <ds1307_set_current_time+0x7e>
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	f023 0320 	bic.w	r3, r3, #32
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	73fb      	strb	r3, [r7, #15]
    }
    ds1307_write(hours, DS1307_ADDR_HOUR);
 80007bc:	7bfb      	ldrb	r3, [r7, #15]
 80007be:	2102      	movs	r1, #2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff0d 	bl	80005e0 <ds1307_write>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <ds1307_get_current_time>:

void ds1307_get_current_time(RTC_time_t *rtc_time)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b084      	sub	sp, #16
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
    uint8_t seconds, hours;
    seconds = ds1307_read(DS1307_ADDR_SECOND);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f7ff ff1e 	bl	8000618 <ds1307_read>
 80007dc:	4603      	mov	r3, r0
 80007de:	73bb      	strb	r3, [r7, #14]
    seconds &= ~(1 << 7);
 80007e0:	7bbb      	ldrb	r3, [r7, #14]
 80007e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007e6:	73bb      	strb	r3, [r7, #14]
    rtc_time->seconds = bcd_to_binary(seconds);
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ff64 	bl	80006b8 <bcd_to_binary>
 80007f0:	4603      	mov	r3, r0
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	701a      	strb	r2, [r3, #0]
    rtc_time->minutes = bcd_to_binary(ds1307_read(DS1307_ADDR_MINUTE));
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff0d 	bl	8000618 <ds1307_read>
 80007fe:	4603      	mov	r3, r0
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff59 	bl	80006b8 <bcd_to_binary>
 8000806:	4603      	mov	r3, r0
 8000808:	461a      	mov	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	705a      	strb	r2, [r3, #1]
    hours = bcd_to_binary(ds1307_read(DS1307_ADDR_HOUR));
 800080e:	2002      	movs	r0, #2
 8000810:	f7ff ff02 	bl	8000618 <ds1307_read>
 8000814:	4603      	mov	r3, r0
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff4e 	bl	80006b8 <bcd_to_binary>
 800081c:	4603      	mov	r3, r0
 800081e:	73fb      	strb	r3, [r7, #15]
    if(hours & (1 << 6)) // 12-hour mode
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	2b00      	cmp	r3, #0
 8000828:	d014      	beq.n	8000854 <ds1307_get_current_time+0x86>
    {
        if(hours & (1 << 5)) // PM
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	f003 0320 	and.w	r3, r3, #32
 8000830:	2b00      	cmp	r3, #0
 8000832:	d007      	beq.n	8000844 <ds1307_get_current_time+0x76>
        {
            rtc_time->time_format = TIME_FORMAT_12HRS_PM;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2201      	movs	r2, #1
 8000838:	70da      	strb	r2, [r3, #3]
            hours &= ~((1 << 6) | (1 << 5));
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000840:	73fb      	strb	r3, [r7, #15]
 8000842:	e00a      	b.n	800085a <ds1307_get_current_time+0x8c>
        }
        else
        {
            rtc_time->time_format = TIME_FORMAT_12HRS_AM;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2200      	movs	r2, #0
 8000848:	70da      	strb	r2, [r3, #3]
            hours &= ~((1 << 6) | (1 << 5));
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e002      	b.n	800085a <ds1307_get_current_time+0x8c>
        }
    }
    else // 24-hour mode
    {
        rtc_time->time_format = TIME_FORMAT_24HRS;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2202      	movs	r2, #2
 8000858:	70da      	strb	r2, [r3, #3]
    }
    rtc_time->hours = bcd_to_binary(hours);
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff2b 	bl	80006b8 <bcd_to_binary>
 8000862:	4603      	mov	r3, r0
 8000864:	461a      	mov	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	709a      	strb	r2, [r3, #2]
}
 800086a:	bf00      	nop
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <ds1307_set_current_date>:

void ds1307_set_current_date(RTC_date_t *rtc_date)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b082      	sub	sp, #8
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
    ds1307_write(binary_to_bcd(rtc_date->day), DS1307_ADDR_DAY);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	78db      	ldrb	r3, [r3, #3]
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fee8 	bl	8000654 <binary_to_bcd>
 8000884:	4603      	mov	r3, r0
 8000886:	2103      	movs	r1, #3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fea9 	bl	80005e0 <ds1307_write>
    ds1307_write(binary_to_bcd(rtc_date->date), DS1307_ADDR_DATE);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fede 	bl	8000654 <binary_to_bcd>
 8000898:	4603      	mov	r3, r0
 800089a:	2104      	movs	r1, #4
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe9f 	bl	80005e0 <ds1307_write>
    ds1307_write(binary_to_bcd(rtc_date->month), DS1307_ADDR_MONTH);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fed4 	bl	8000654 <binary_to_bcd>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2105      	movs	r1, #5
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe95 	bl	80005e0 <ds1307_write>
    ds1307_write(binary_to_bcd(rtc_date->year), DS1307_ADDR_YEAR);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	789b      	ldrb	r3, [r3, #2]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff feca 	bl	8000654 <binary_to_bcd>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2106      	movs	r1, #6
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe8b 	bl	80005e0 <ds1307_write>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <ds1307_get_current_date>:

void ds1307_get_current_date(RTC_date_t *rtc_date)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
    rtc_date->day = bcd_to_binary(ds1307_read(DS1307_ADDR_DAY));
 80008da:	2003      	movs	r0, #3
 80008dc:	f7ff fe9c 	bl	8000618 <ds1307_read>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fee8 	bl	80006b8 <bcd_to_binary>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	70da      	strb	r2, [r3, #3]
    rtc_date->date = bcd_to_binary(ds1307_read(DS1307_ADDR_DATE));
 80008f0:	2004      	movs	r0, #4
 80008f2:	f7ff fe91 	bl	8000618 <ds1307_read>
 80008f6:	4603      	mov	r3, r0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fedd 	bl	80006b8 <bcd_to_binary>
 80008fe:	4603      	mov	r3, r0
 8000900:	461a      	mov	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	701a      	strb	r2, [r3, #0]
    rtc_date->month = bcd_to_binary(ds1307_read(DS1307_ADDR_MONTH));
 8000906:	2005      	movs	r0, #5
 8000908:	f7ff fe86 	bl	8000618 <ds1307_read>
 800090c:	4603      	mov	r3, r0
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fed2 	bl	80006b8 <bcd_to_binary>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	705a      	strb	r2, [r3, #1]
    rtc_date->year = bcd_to_binary(ds1307_read(DS1307_ADDR_YEAR));
 800091c:	2006      	movs	r0, #6
 800091e:	f7ff fe7b 	bl	8000618 <ds1307_read>
 8000922:	4603      	mov	r3, r0
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fec7 	bl	80006b8 <bcd_to_binary>
 800092a:	4603      	mov	r3, r0
 800092c:	461a      	mov	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	709a      	strb	r2, [r3, #2]
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <GPIO_Init>:

#include "stm32f407xx_gpio_driver.h"

//Init, De-Init
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // temp register
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2101      	movs	r1, #1
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f978 	bl	8000c44 <GPIO_PeriClockControl>

	// 1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) // non interrupt mode
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	795b      	ldrb	r3, [r3, #5]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d820      	bhi.n	800099e <GPIO_Init+0x62>
	{
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	795b      	ldrb	r3, [r3, #5]
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	791b      	ldrb	r3, [r3, #4]
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	fa02 f303 	lsl.w	r3, r2, r3
 800096c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	400a      	ands	r2, r1
 800098a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	430a      	orrs	r2, r1
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	e0a1      	b.n	8000ae2 <GPIO_Init+0x1a6>
	}
	else
	{
		// 1. configure interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) //mode detect falling edge
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	795b      	ldrb	r3, [r3, #5]
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d117      	bne.n	80009d6 <GPIO_Init+0x9a>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009a6:	4b9f      	ldr	r3, [pc, #636]	; (8000c24 <GPIO_Init+0x2e8>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	7912      	ldrb	r2, [r2, #4]
 80009ae:	4611      	mov	r1, r2
 80009b0:	2201      	movs	r2, #1
 80009b2:	408a      	lsls	r2, r1
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a9b      	ldr	r2, [pc, #620]	; (8000c24 <GPIO_Init+0x2e8>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	60d3      	str	r3, [r2, #12]
			//clear the corresponding RTSR bit (disable rising mode)
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009bc:	4b99      	ldr	r3, [pc, #612]	; (8000c24 <GPIO_Init+0x2e8>)
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	7912      	ldrb	r2, [r2, #4]
 80009c4:	4611      	mov	r1, r2
 80009c6:	2201      	movs	r2, #1
 80009c8:	408a      	lsls	r2, r1
 80009ca:	43d2      	mvns	r2, r2
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a95      	ldr	r2, [pc, #596]	; (8000c24 <GPIO_Init+0x2e8>)
 80009d0:	400b      	ands	r3, r1
 80009d2:	6093      	str	r3, [r2, #8]
 80009d4:	e035      	b.n	8000a42 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) //mode detect rising edge
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d117      	bne.n	8000a0e <GPIO_Init+0xd2>
		{
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009de:	4b91      	ldr	r3, [pc, #580]	; (8000c24 <GPIO_Init+0x2e8>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	7912      	ldrb	r2, [r2, #4]
 80009e6:	4611      	mov	r1, r2
 80009e8:	2201      	movs	r2, #1
 80009ea:	408a      	lsls	r2, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a8d      	ldr	r2, [pc, #564]	; (8000c24 <GPIO_Init+0x2e8>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6093      	str	r3, [r2, #8]
			//clear the corresponding FTSR bit (disable falling mode)
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80009f4:	4b8b      	ldr	r3, [pc, #556]	; (8000c24 <GPIO_Init+0x2e8>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	7912      	ldrb	r2, [r2, #4]
 80009fc:	4611      	mov	r1, r2
 80009fe:	2201      	movs	r2, #1
 8000a00:	408a      	lsls	r2, r1
 8000a02:	43d2      	mvns	r2, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a87      	ldr	r2, [pc, #540]	; (8000c24 <GPIO_Init+0x2e8>)
 8000a08:	400b      	ands	r3, r1
 8000a0a:	60d3      	str	r3, [r2, #12]
 8000a0c:	e019      	b.n	8000a42 <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) //mode detect falling & rising edge
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	795b      	ldrb	r3, [r3, #5]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d115      	bne.n	8000a42 <GPIO_Init+0x106>
		{
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a16:	4b83      	ldr	r3, [pc, #524]	; (8000c24 <GPIO_Init+0x2e8>)
 8000a18:	68db      	ldr	r3, [r3, #12]
 8000a1a:	687a      	ldr	r2, [r7, #4]
 8000a1c:	7912      	ldrb	r2, [r2, #4]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	2201      	movs	r2, #1
 8000a22:	408a      	lsls	r2, r1
 8000a24:	4611      	mov	r1, r2
 8000a26:	4a7f      	ldr	r2, [pc, #508]	; (8000c24 <GPIO_Init+0x2e8>)
 8000a28:	430b      	orrs	r3, r1
 8000a2a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000a2c:	4b7d      	ldr	r3, [pc, #500]	; (8000c24 <GPIO_Init+0x2e8>)
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	7912      	ldrb	r2, [r2, #4]
 8000a34:	4611      	mov	r1, r2
 8000a36:	2201      	movs	r2, #1
 8000a38:	408a      	lsls	r2, r1
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a79      	ldr	r2, [pc, #484]	; (8000c24 <GPIO_Init+0x2e8>)
 8000a3e:	430b      	orrs	r3, r1
 8000a40:	6093      	str	r3, [r2, #8]
		}

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	791b      	ldrb	r3, [r3, #4]
 8000a46:	089b      	lsrs	r3, r3, #2
 8000a48:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	f003 0303 	and.w	r3, r3, #3
 8000a52:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a73      	ldr	r2, [pc, #460]	; (8000c28 <GPIO_Init+0x2ec>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d01d      	beq.n	8000a9a <GPIO_Init+0x15e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a72      	ldr	r2, [pc, #456]	; (8000c2c <GPIO_Init+0x2f0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d016      	beq.n	8000a96 <GPIO_Init+0x15a>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a70      	ldr	r2, [pc, #448]	; (8000c30 <GPIO_Init+0x2f4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d00f      	beq.n	8000a92 <GPIO_Init+0x156>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a6f      	ldr	r2, [pc, #444]	; (8000c34 <GPIO_Init+0x2f8>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d008      	beq.n	8000a8e <GPIO_Init+0x152>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a6d      	ldr	r2, [pc, #436]	; (8000c38 <GPIO_Init+0x2fc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <GPIO_Init+0x14e>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e008      	b.n	8000a9c <GPIO_Init+0x160>
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e006      	b.n	8000a9c <GPIO_Init+0x160>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e004      	b.n	8000a9c <GPIO_Init+0x160>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <GPIO_Init+0x160>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <GPIO_Init+0x160>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000a9e:	4b67      	ldr	r3, [pc, #412]	; (8000c3c <GPIO_Init+0x300>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	4a66      	ldr	r2, [pc, #408]	; (8000c3c <GPIO_Init+0x300>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portcode << (4 * temp2));
 8000aaa:	4a65      	ldr	r2, [pc, #404]	; (8000c40 <GPIO_Init+0x304>)
 8000aac:	7cfb      	ldrb	r3, [r7, #19]
 8000aae:	3302      	adds	r3, #2
 8000ab0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ab4:	7c79      	ldrb	r1, [r7, #17]
 8000ab6:	7cbb      	ldrb	r3, [r7, #18]
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	495f      	ldr	r1, [pc, #380]	; (8000c40 <GPIO_Init+0x304>)
 8000ac2:	7cfb      	ldrb	r3, [r7, #19]
 8000ac4:	4302      	orrs	r2, r0
 8000ac6:	3302      	adds	r3, #2
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000acc:	4b55      	ldr	r3, [pc, #340]	; (8000c24 <GPIO_Init+0x2e8>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	7912      	ldrb	r2, [r2, #4]
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	408a      	lsls	r2, r1
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a51      	ldr	r2, [pc, #324]	; (8000c24 <GPIO_Init+0x2e8>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	617b      	str	r3, [r7, #20]
	// 2. configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	799b      	ldrb	r3, [r3, #6]
 8000aea:	461a      	mov	r2, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2103      	movs	r1, #3
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	400a      	ands	r2, r1
 8000b14:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; //setting
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6899      	ldr	r1, [r3, #8]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
	// 3. configure the pull up/pull down settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	79db      	ldrb	r3, [r3, #7]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791b      	ldrb	r3, [r3, #4]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	791b      	ldrb	r3, [r3, #4]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	2103      	movs	r1, #3
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	400a      	ands	r2, r1
 8000b58:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; //setting
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68d9      	ldr	r1, [r3, #12]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	430a      	orrs	r2, r1
 8000b68:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
	// 4. configure the output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7a1b      	ldrb	r3, [r3, #8]
 8000b72:	461a      	mov	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	791b      	ldrb	r3, [r3, #4]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	408b      	lsls	r3, r1
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	400a      	ands	r2, r1
 8000b98:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp; //setting
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	697a      	ldr	r2, [r7, #20]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
	// 5. configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	795b      	ldrb	r3, [r3, #5]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d131      	bne.n	8000c1a <GPIO_Init+0x2de>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	791b      	ldrb	r3, [r3, #4]
 8000bba:	08db      	lsrs	r3, r3, #3
 8000bbc:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2)); //clearing
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	7c3a      	ldrb	r2, [r7, #16]
 8000bce:	3208      	adds	r2, #8
 8000bd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	009b      	lsls	r3, r3, #2
 8000bd8:	220f      	movs	r2, #15
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	4618      	mov	r0, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	7c3a      	ldrb	r2, [r7, #16]
 8000be8:	4001      	ands	r1, r0
 8000bea:	3208      	adds	r2, #8
 8000bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2)); //setting
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	7c3a      	ldrb	r2, [r7, #16]
 8000bf6:	3208      	adds	r2, #8
 8000bf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	7a5b      	ldrb	r3, [r3, #9]
 8000c00:	461a      	mov	r2, r3
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	7c3a      	ldrb	r2, [r7, #16]
 8000c12:	4301      	orrs	r1, r0
 8000c14:	3208      	adds	r2, #8
 8000c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000c1a:	bf00      	nop
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40013c00 	.word	0x40013c00
 8000c28:	40020000 	.word	0x40020000
 8000c2c:	40020400 	.word	0x40020400
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020c00 	.word	0x40020c00
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40013800 	.word	0x40013800

08000c44 <GPIO_PeriClockControl>:
	}
}

//Peripheral Clock Setup
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d136      	bne.n	8000cc4 <GPIO_PeriClockControl+0x80>
	{
		if(pGPIOx == GPIOA)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a38      	ldr	r2, [pc, #224]	; (8000d3c <GPIO_PeriClockControl+0xf8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000c5e:	4b38      	ldr	r3, [pc, #224]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOE_PCLK_DI();
		}
	}

}
 8000c6a:	e061      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOB)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a35      	ldr	r2, [pc, #212]	; (8000d44 <GPIO_PeriClockControl+0x100>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d106      	bne.n	8000c82 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000c74:	4b32      	ldr	r3, [pc, #200]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	4a31      	ldr	r2, [pc, #196]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c80:	e056      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOC)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a30      	ldr	r2, [pc, #192]	; (8000d48 <GPIO_PeriClockControl+0x104>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d106      	bne.n	8000c98 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a2c      	ldr	r2, [pc, #176]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000c96:	e04b      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOD)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a2c      	ldr	r2, [pc, #176]	; (8000d4c <GPIO_PeriClockControl+0x108>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d106      	bne.n	8000cae <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca4:	4a26      	ldr	r2, [pc, #152]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cac:	e040      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOE)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <GPIO_PeriClockControl+0x10c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d13c      	bne.n	8000d30 <GPIO_PeriClockControl+0xec>
			GPIOE_PCLK_EN();
 8000cb6:	4b22      	ldr	r3, [pc, #136]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a21      	ldr	r2, [pc, #132]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cbc:	f043 0310 	orr.w	r3, r3, #16
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cc2:	e035      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		if(pGPIOx == GPIOA)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <GPIO_PeriClockControl+0xf8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d106      	bne.n	8000cda <GPIO_PeriClockControl+0x96>
			GPIOA_PCLK_DI();
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cd2:	f023 0301 	bic.w	r3, r3, #1
 8000cd6:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cd8:	e02a      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOB)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <GPIO_PeriClockControl+0x100>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d106      	bne.n	8000cf0 <GPIO_PeriClockControl+0xac>
			GPIOB_PCLK_DI();
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a16      	ldr	r2, [pc, #88]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000ce8:	f023 0302 	bic.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000cee:	e01f      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOC)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <GPIO_PeriClockControl+0x104>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d106      	bne.n	8000d06 <GPIO_PeriClockControl+0xc2>
			GPIOC_PCLK_DI();
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfc:	4a10      	ldr	r2, [pc, #64]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000cfe:	f023 0304 	bic.w	r3, r3, #4
 8000d02:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d04:	e014      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOD)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a10      	ldr	r2, [pc, #64]	; (8000d4c <GPIO_PeriClockControl+0x108>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d106      	bne.n	8000d1c <GPIO_PeriClockControl+0xd8>
			GPIOD_PCLK_DI();
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000d14:	f023 0308 	bic.w	r3, r3, #8
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d1a:	e009      	b.n	8000d30 <GPIO_PeriClockControl+0xec>
		else if(pGPIOx == GPIOE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0c      	ldr	r2, [pc, #48]	; (8000d50 <GPIO_PeriClockControl+0x10c>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d105      	bne.n	8000d30 <GPIO_PeriClockControl+0xec>
			GPIOE_PCLK_DI();
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <GPIO_PeriClockControl+0xfc>)
 8000d2a:	f023 0310 	bic.w	r3, r3, #16
 8000d2e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40020800 	.word	0x40020800
 8000d4c:	40020c00 	.word	0x40020c00
 8000d50:	40021000 	.word	0x40021000

08000d54 <I2C_ClearADDRFlag>:
#include "stm32f407xx_i2c_driver.h"

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	// Check device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d021      	beq.n	8000dae <I2C_ClearADDRFlag+0x5a>
	{
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7e1b      	ldrb	r3, [r3, #24]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d114      	bne.n	8000d9c <I2C_ClearADDRFlag+0x48>
		{
			if(pI2CHandle->RxSize == 1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d121      	bne.n	8000dbe <I2C_ClearADDRFlag+0x6a>
			{
				// Disable the Ack
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d88:	601a      	str	r2, [r3, #0]
				// Clear the ADDR flag
				dummyRead = pI2CHandle->pI2Cx->SR1;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	60fb      	str	r3, [r7, #12]
				dummyRead = pI2CHandle->pI2Cx->SR2;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	60fb      	str	r3, [r7, #12]
	{
		dummyRead = pI2CHandle->pI2Cx->SR1;
		dummyRead = pI2CHandle->pI2Cx->SR2;
		(void)dummyRead;
	}
} 
 8000d9a:	e010      	b.n	8000dbe <I2C_ClearADDRFlag+0x6a>
			dummyRead = pI2CHandle->pI2Cx->SR1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	695b      	ldr	r3, [r3, #20]
 8000da2:	60fb      	str	r3, [r7, #12]
			dummyRead = pI2CHandle->pI2Cx->SR2;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	60fb      	str	r3, [r7, #12]
} 
 8000dac:	e007      	b.n	8000dbe <I2C_ClearADDRFlag+0x6a>
		dummyRead = pI2CHandle->pI2Cx->SR1;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	60fb      	str	r3, [r7, #12]
		dummyRead = pI2CHandle->pI2Cx->SR2;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	60fb      	str	r3, [r7, #12]
} 
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <I2C_ExecuteAddressPhase>:

static void I2C_ExecuteAddressPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t State)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	70fb      	strb	r3, [r7, #3]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	70bb      	strb	r3, [r7, #2]
	SlaveAddr = SlaveAddr << 1;
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	70fb      	strb	r3, [r7, #3]
	if(State == WRITE)
 8000de0:	78bb      	ldrb	r3, [r7, #2]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d107      	bne.n	8000df6 <I2C_ExecuteAddressPhase+0x2c>
	{
		// Send data: Write(0)
		SlaveAddr &= ~(1);
 8000de6:	78fb      	ldrb	r3, [r7, #3]
 8000de8:	f023 0301 	bic.w	r3, r3, #1
 8000dec:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	611a      	str	r2, [r3, #16]
	{
		// Receive data: Read(1)
		SlaveAddr |= (1);
		pI2Cx->DR = SlaveAddr;
	}
}
 8000df4:	e006      	b.n	8000e04 <I2C_ExecuteAddressPhase+0x3a>
		SlaveAddr |= (1);
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	70fb      	strb	r3, [r7, #3]
		pI2Cx->DR = SlaveAddr;
 8000dfe:	78fa      	ldrb	r2, [r7, #3]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	611a      	str	r2, [r3, #16]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <I2C_PeriClockControl>:
	pI2CHandle->pI2Cx->CR1 |= 0x0000;
	(void)dummyRead;
}

void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d11f      	bne.n	8000e62 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <I2C_PeriClockControl+0x60>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d106      	bne.n	8000e38 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
	}
	else
	{
		//TODO
	}
}
 8000e36:	e014      	b.n	8000e62 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <I2C_PeriClockControl+0x68>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d106      	bne.n	8000e4e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e4c:	e009      	b.n	8000e62 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <I2C_PeriClockControl+0x6c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d105      	bne.n	8000e62 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a06      	ldr	r2, [pc, #24]	; (8000e74 <I2C_PeriClockControl+0x64>)
 8000e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40005400 	.word	0x40005400
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	40005c00 	.word	0x40005c00

08000e80 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d106      	bne.n	8000ea0 <I2C_PeripheralControl+0x20>
    {
        pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0201 	orr.w	r2, r3, #1
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
    }
}
 8000e9e:	e005      	b.n	8000eac <I2C_PeripheralControl+0x2c>
        pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f023 0201 	bic.w	r2, r3, #1
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <I2C_Init>:

void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    uint32_t tempreg = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
	uint16_t ccr_value = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	817b      	strh	r3, [r7, #10]

	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff9e 	bl	8000e10 <I2C_PeriClockControl>

	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << I2C_CR1_ACK);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	799b      	ldrb	r3, [r3, #6]
 8000ed8:	029b      	lsls	r3, r3, #10
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6819      	ldr	r1, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	601a      	str	r2, [r3, #0]

	tempreg = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60fb      	str	r3, [r7, #12]
	tempreg |= (RCC_GetPCLK1Value() / 1000000U);
 8000ef6:	f000 f949 	bl	800118c <RCC_GetPCLK1Value>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <I2C_Init+0xec>)
 8000efe:	fba2 2303 	umull	r2, r3, r2, r3
 8000f02:	0c9b      	lsrs	r3, r3, #18
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & 0x3F);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	6859      	ldr	r1, [r3, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	605a      	str	r2, [r3, #4]

	tempreg = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
	tempreg |= (pI2CHandle->I2C_Config.I2C_DeviceAddress << I2C_OAR1_ADD71);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	795b      	ldrb	r3, [r3, #5]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	461a      	mov	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
	tempreg |= (1 << 14);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	6899      	ldr	r1, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	609a      	str	r2, [r3, #8]

	tempreg = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// Standard mode
		ccr_value = (RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000f4c:	f000 f91e 	bl	800118c <RCC_GetPCLK1Value>
 8000f50:	4602      	mov	r2, r0
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	791b      	ldrb	r3, [r3, #4]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5c:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8000f5e:	897b      	ldrh	r3, [r7, #10]
 8000f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f64:	68fa      	ldr	r2, [r7, #12]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
			tempreg |= (1 << I2C_CCR_DUTY);
			ccr_value = (RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
		}
		tempreg |= (ccr_value & 0xFFF);
	}
	pI2CHandle->pI2Cx->CCR |= tempreg;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69d9      	ldr	r1, [r3, #28]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68fa      	ldr	r2, [r7, #12]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	61da      	str	r2, [r3, #28]

	// TRISE Configuration
	// TRISE = f * t(rise) + 1 
	// t(rise Sm max) = 1000ns, t(rise Fm max) = 300ns
	tempreg = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
	{
		// Standard mode
		tempreg = (RCC_GetPCLK1Value() / 1000000U) + 1 ;
 8000f7e:	f000 f905 	bl	800118c <RCC_GetPCLK1Value>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <I2C_Init+0xec>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
	}else
	{
		// Fast mode
		tempreg = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
	}
	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000f9a:	621a      	str	r2, [r3, #32]
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	431bde83 	.word	0x431bde83

08000fa8 <I2C_MasterSendData>:
{

}

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
 8000fb4:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fc4:	601a      	str	r2, [r3, #0]
	// 2. Confirm that start generation is completed by checking the SB flag in the SR1
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB)));
 8000fc6:	bf00      	nop
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f8      	beq.n	8000fc8 <I2C_MasterSendData+0x20>
	// 3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, WRITE);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	78f9      	ldrb	r1, [r7, #3]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fef3 	bl	8000dca <I2C_ExecuteAddressPhase>
	// 4. Confirm that address phase is completed by checking the ADDR flag in the SR1
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR)));
 8000fe4:	bf00      	nop
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	695b      	ldr	r3, [r3, #20]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f8      	beq.n	8000fe6 <I2C_MasterSendData+0x3e>
	// 5. Clear the ADDR flag according to its software sequence
	// Note: Until ADDR is cleared SCL will be stretched (pull to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f7ff fead 	bl	8000d54 <I2C_ClearADDRFlag>
	// 6. Send the data until Len becomes 0
	while(Len > 0)
 8000ffa:	e012      	b.n	8001022 <I2C_MasterSendData+0x7a>
	{
		while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)));
 8000ffc:	bf00      	nop
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f8      	beq.n	8000ffe <I2C_MasterSendData+0x56>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	781a      	ldrb	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	3301      	adds	r3, #1
 800101a:	60bb      	str	r3, [r7, #8]
		Len--;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d1e9      	bne.n	8000ffc <I2C_MasterSendData+0x54>
	}
	// 7. When Len becomes 0 wait for TXE = 1 and BTF = 1 before generating STOP condition 
	// Note: TXE = 1, BTF = 1 means that bit SR and DR are empty and next transmission should begin
	// When BTF = 1 SCL will be stretched (pull to LOW)
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE)));
 8001028:	bf00      	nop
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	695b      	ldr	r3, [r3, #20]
 8001030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001034:	2b00      	cmp	r3, #0
 8001036:	d0f8      	beq.n	800102a <I2C_MasterSendData+0x82>
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF)));
 8001038:	bf00      	nop
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	695b      	ldr	r3, [r3, #20]
 8001040:	f003 0304 	and.w	r3, r3, #4
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f8      	beq.n	800103a <I2C_MasterSendData+0x92>
	// 8. Generate STOP condition and Masster need not to wait for the completion of STOP condition
	// Note: Generating STOP condition autimatically clears thr BTF
	if(Sr == I2C_DISABLE_SR)
 8001048:	7e3b      	ldrb	r3, [r7, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d107      	bne.n	800105e <I2C_MasterSendData+0xb6>
	{
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800105c:	601a      	str	r2, [r3, #0]
	}
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <I2C_MasterReceiveData>:

void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	60f8      	str	r0, [r7, #12]
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	70fb      	strb	r3, [r7, #3]
	// 1. Generate he START condition
	pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001082:	601a      	str	r2, [r3, #0]
	// 2. Confirm that START condituon generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while(!(pI2CHandle->pI2Cx->SR1) & (1 << I2C_SR1_SB));
 8001084:	bf00      	nop
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	695b      	ldr	r3, [r3, #20]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0fa      	beq.n	8001086 <I2C_MasterReceiveData+0x20>
	// 3. Send the address of the slave with r/nw bit set to Read(1) (total 8 bits)
	I2C_ExecuteAddressPhase(pI2CHandle->pI2Cx, SlaveAddr, READ);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	78f9      	ldrb	r1, [r7, #3]
 8001096:	2201      	movs	r2, #1
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fe96 	bl	8000dca <I2C_ExecuteAddressPhase>
	// 4. Wait until address phase is completed by checking the ADDR flag in the SR1
	while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR)));
 800109e:	bf00      	nop
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d0f8      	beq.n	80010a0 <I2C_MasterReceiveData+0x3a>
	// Procedure to read only 1 byte from Slave
	if(Len == 1)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d124      	bne.n	80010fe <I2C_MasterReceiveData+0x98>
	{
		// Disable Acking 
		pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010c2:	601a      	str	r2, [r3, #0]
		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f7ff fe45 	bl	8000d54 <I2C_ClearADDRFlag>
		// Wait until RXNE becomes 1
		while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE)));
 80010ca:	bf00      	nop
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f8      	beq.n	80010cc <I2C_MasterReceiveData+0x66>
		// Generate STOP conditon
		if(Sr == I2C_DISABLE_SR)
 80010da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d107      	bne.n	80010f2 <I2C_MasterReceiveData+0x8c>
		{
			pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010f0:	601a      	str	r2, [r3, #0]
		}
		// Read data in DR register
		*pRxBuffer = pI2CHandle->pI2Cx->DR;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	701a      	strb	r2, [r3, #0]
	}
	// Procedure to read data from Slave when Len > 1
	if(Len > 1)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d933      	bls.n	800116c <I2C_MasterReceiveData+0x106>
	{
		// Clear the ADDR flag
		I2C_ClearADDRFlag(pI2CHandle);
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff fe25 	bl	8000d54 <I2C_ClearADDRFlag>
		
		// Read data in DR register until Len = 0
		for(uint32_t i = Len; i > 0; i--)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	e02a      	b.n	8001166 <I2C_MasterReceiveData+0x100>
		{
			// Wait until RXNE becomes 1
			while(!(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE)));
 8001110:	bf00      	nop
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0f8      	beq.n	8001112 <I2C_MasterReceiveData+0xac>
			if(i == 2)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d113      	bne.n	800114e <I2C_MasterReceiveData+0xe8>
			{
				// Disable Acking
				pI2CHandle->pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001134:	601a      	str	r2, [r3, #0]
				// Generate STOP condition
				if(Sr == I2C_DISABLE_SR)
 8001136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d107      	bne.n	800114e <I2C_MasterReceiveData+0xe8>
				{
					pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800114c:	601a      	str	r2, [r3, #0]
				}
			}
			// Read data in DR register
			*pRxBuffer = pI2CHandle->pI2Cx->DR;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3301      	adds	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len; i > 0; i--)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3b01      	subs	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1d1      	bne.n	8001110 <I2C_MasterReceiveData+0xaa>
		}
	}
	// Re_enable Acking
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	799b      	ldrb	r3, [r3, #6]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <I2C_MasterReceiveData+0x11e>
	{
		pI2CHandle->pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001182:	601a      	str	r2, [r3, #0]
	}
}
 8001184:	bf00      	nop
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2, 4, 8, 16, 64, 128, 256, 512};
uint8_t APB1_PreScaler[4] = {2, 4, 8, 16};


uint32_t RCC_GetPCLK1Value(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;

	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <RCC_GetPCLK1Value+0x9c>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80011a0:	7a7b      	ldrb	r3, [r7, #9]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d102      	bne.n	80011ac <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <RCC_GetPCLK1Value+0xa0>)
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	e00b      	b.n	80011c4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80011ac:	7a7b      	ldrb	r3, [r7, #9]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d102      	bne.n	80011b8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <RCC_GetPCLK1Value+0xa4>)
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	e005      	b.n	80011c4 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80011b8:	7a7b      	ldrb	r3, [r7, #9]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d102      	bne.n	80011c4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80011be:	f000 f83d 	bl	800123c <RCC_GetPLLOutputClock>
 80011c2:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <RCC_GetPCLK1Value+0x9c>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80011d2:	7a3b      	ldrb	r3, [r7, #8]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d802      	bhi.n	80011de <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	72fb      	strb	r3, [r7, #11]
 80011dc:	e005      	b.n	80011ea <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp - 8];
 80011de:	7a3b      	ldrb	r3, [r7, #8]
 80011e0:	3b08      	subs	r3, #8
 80011e2:	4a14      	ldr	r2, [pc, #80]	; (8001234 <RCC_GetPCLK1Value+0xa8>)
 80011e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e8:	72fb      	strb	r3, [r7, #11]
	}

	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <RCC_GetPCLK1Value+0x9c>)
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	0a9b      	lsrs	r3, r3, #10
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 80011f8:	7a3b      	ldrb	r3, [r7, #8]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d802      	bhi.n	8001204 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	72bb      	strb	r3, [r7, #10]
 8001202:	e004      	b.n	800120e <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8001204:	7a3b      	ldrb	r3, [r7, #8]
 8001206:	3b04      	subs	r3, #4
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <RCC_GetPCLK1Value+0xac>)
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	fbb2 f2f3 	udiv	r2, r2, r3
 8001216:	7abb      	ldrb	r3, [r7, #10]
 8001218:	fbb2 f3f3 	udiv	r3, r2, r3
 800121c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800121e:	687b      	ldr	r3, [r7, #4]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	007a1200 	.word	0x007a1200
 8001234:	20000000 	.word	0x20000000
 8001238:	20000010 	.word	0x20000010

0800123c <RCC_GetPLLOutputClock>:

	return pclk2;
}

uint32_t  RCC_GetPLLOutputClock()
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <__libc_init_array>:
 800124c:	b570      	push	{r4, r5, r6, lr}
 800124e:	4d0d      	ldr	r5, [pc, #52]	; (8001284 <__libc_init_array+0x38>)
 8001250:	4c0d      	ldr	r4, [pc, #52]	; (8001288 <__libc_init_array+0x3c>)
 8001252:	1b64      	subs	r4, r4, r5
 8001254:	10a4      	asrs	r4, r4, #2
 8001256:	2600      	movs	r6, #0
 8001258:	42a6      	cmp	r6, r4
 800125a:	d109      	bne.n	8001270 <__libc_init_array+0x24>
 800125c:	4d0b      	ldr	r5, [pc, #44]	; (800128c <__libc_init_array+0x40>)
 800125e:	4c0c      	ldr	r4, [pc, #48]	; (8001290 <__libc_init_array+0x44>)
 8001260:	f001 f82a 	bl	80022b8 <_init>
 8001264:	1b64      	subs	r4, r4, r5
 8001266:	10a4      	asrs	r4, r4, #2
 8001268:	2600      	movs	r6, #0
 800126a:	42a6      	cmp	r6, r4
 800126c:	d105      	bne.n	800127a <__libc_init_array+0x2e>
 800126e:	bd70      	pop	{r4, r5, r6, pc}
 8001270:	f855 3b04 	ldr.w	r3, [r5], #4
 8001274:	4798      	blx	r3
 8001276:	3601      	adds	r6, #1
 8001278:	e7ee      	b.n	8001258 <__libc_init_array+0xc>
 800127a:	f855 3b04 	ldr.w	r3, [r5], #4
 800127e:	4798      	blx	r3
 8001280:	3601      	adds	r6, #1
 8001282:	e7f2      	b.n	800126a <__libc_init_array+0x1e>
 8001284:	08002434 	.word	0x08002434
 8001288:	08002434 	.word	0x08002434
 800128c:	08002434 	.word	0x08002434
 8001290:	08002438 	.word	0x08002438

08001294 <memset>:
 8001294:	4402      	add	r2, r0
 8001296:	4603      	mov	r3, r0
 8001298:	4293      	cmp	r3, r2
 800129a:	d100      	bne.n	800129e <memset+0xa>
 800129c:	4770      	bx	lr
 800129e:	f803 1b01 	strb.w	r1, [r3], #1
 80012a2:	e7f9      	b.n	8001298 <memset+0x4>

080012a4 <iprintf>:
 80012a4:	b40f      	push	{r0, r1, r2, r3}
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <iprintf+0x2c>)
 80012a8:	b513      	push	{r0, r1, r4, lr}
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	b124      	cbz	r4, 80012b8 <iprintf+0x14>
 80012ae:	69a3      	ldr	r3, [r4, #24]
 80012b0:	b913      	cbnz	r3, 80012b8 <iprintf+0x14>
 80012b2:	4620      	mov	r0, r4
 80012b4:	f000 fa5e 	bl	8001774 <__sinit>
 80012b8:	ab05      	add	r3, sp, #20
 80012ba:	9a04      	ldr	r2, [sp, #16]
 80012bc:	68a1      	ldr	r1, [r4, #8]
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	4620      	mov	r0, r4
 80012c2:	f000 fc2f 	bl	8001b24 <_vfiprintf_r>
 80012c6:	b002      	add	sp, #8
 80012c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012cc:	b004      	add	sp, #16
 80012ce:	4770      	bx	lr
 80012d0:	20000014 	.word	0x20000014

080012d4 <_puts_r>:
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	460e      	mov	r6, r1
 80012d8:	4605      	mov	r5, r0
 80012da:	b118      	cbz	r0, 80012e4 <_puts_r+0x10>
 80012dc:	6983      	ldr	r3, [r0, #24]
 80012de:	b90b      	cbnz	r3, 80012e4 <_puts_r+0x10>
 80012e0:	f000 fa48 	bl	8001774 <__sinit>
 80012e4:	69ab      	ldr	r3, [r5, #24]
 80012e6:	68ac      	ldr	r4, [r5, #8]
 80012e8:	b913      	cbnz	r3, 80012f0 <_puts_r+0x1c>
 80012ea:	4628      	mov	r0, r5
 80012ec:	f000 fa42 	bl	8001774 <__sinit>
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <_puts_r+0xd0>)
 80012f2:	429c      	cmp	r4, r3
 80012f4:	d120      	bne.n	8001338 <_puts_r+0x64>
 80012f6:	686c      	ldr	r4, [r5, #4]
 80012f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012fa:	07db      	lsls	r3, r3, #31
 80012fc:	d405      	bmi.n	800130a <_puts_r+0x36>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	0598      	lsls	r0, r3, #22
 8001302:	d402      	bmi.n	800130a <_puts_r+0x36>
 8001304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001306:	f000 fad3 	bl	80018b0 <__retarget_lock_acquire_recursive>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	0719      	lsls	r1, r3, #28
 800130e:	d51d      	bpl.n	800134c <_puts_r+0x78>
 8001310:	6923      	ldr	r3, [r4, #16]
 8001312:	b1db      	cbz	r3, 800134c <_puts_r+0x78>
 8001314:	3e01      	subs	r6, #1
 8001316:	68a3      	ldr	r3, [r4, #8]
 8001318:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800131c:	3b01      	subs	r3, #1
 800131e:	60a3      	str	r3, [r4, #8]
 8001320:	bb39      	cbnz	r1, 8001372 <_puts_r+0x9e>
 8001322:	2b00      	cmp	r3, #0
 8001324:	da38      	bge.n	8001398 <_puts_r+0xc4>
 8001326:	4622      	mov	r2, r4
 8001328:	210a      	movs	r1, #10
 800132a:	4628      	mov	r0, r5
 800132c:	f000 f848 	bl	80013c0 <__swbuf_r>
 8001330:	3001      	adds	r0, #1
 8001332:	d011      	beq.n	8001358 <_puts_r+0x84>
 8001334:	250a      	movs	r5, #10
 8001336:	e011      	b.n	800135c <_puts_r+0x88>
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <_puts_r+0xd4>)
 800133a:	429c      	cmp	r4, r3
 800133c:	d101      	bne.n	8001342 <_puts_r+0x6e>
 800133e:	68ac      	ldr	r4, [r5, #8]
 8001340:	e7da      	b.n	80012f8 <_puts_r+0x24>
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <_puts_r+0xd8>)
 8001344:	429c      	cmp	r4, r3
 8001346:	bf08      	it	eq
 8001348:	68ec      	ldreq	r4, [r5, #12]
 800134a:	e7d5      	b.n	80012f8 <_puts_r+0x24>
 800134c:	4621      	mov	r1, r4
 800134e:	4628      	mov	r0, r5
 8001350:	f000 f888 	bl	8001464 <__swsetup_r>
 8001354:	2800      	cmp	r0, #0
 8001356:	d0dd      	beq.n	8001314 <_puts_r+0x40>
 8001358:	f04f 35ff 	mov.w	r5, #4294967295
 800135c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800135e:	07da      	lsls	r2, r3, #31
 8001360:	d405      	bmi.n	800136e <_puts_r+0x9a>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	059b      	lsls	r3, r3, #22
 8001366:	d402      	bmi.n	800136e <_puts_r+0x9a>
 8001368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800136a:	f000 faa2 	bl	80018b2 <__retarget_lock_release_recursive>
 800136e:	4628      	mov	r0, r5
 8001370:	bd70      	pop	{r4, r5, r6, pc}
 8001372:	2b00      	cmp	r3, #0
 8001374:	da04      	bge.n	8001380 <_puts_r+0xac>
 8001376:	69a2      	ldr	r2, [r4, #24]
 8001378:	429a      	cmp	r2, r3
 800137a:	dc06      	bgt.n	800138a <_puts_r+0xb6>
 800137c:	290a      	cmp	r1, #10
 800137e:	d004      	beq.n	800138a <_puts_r+0xb6>
 8001380:	6823      	ldr	r3, [r4, #0]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	6022      	str	r2, [r4, #0]
 8001386:	7019      	strb	r1, [r3, #0]
 8001388:	e7c5      	b.n	8001316 <_puts_r+0x42>
 800138a:	4622      	mov	r2, r4
 800138c:	4628      	mov	r0, r5
 800138e:	f000 f817 	bl	80013c0 <__swbuf_r>
 8001392:	3001      	adds	r0, #1
 8001394:	d1bf      	bne.n	8001316 <_puts_r+0x42>
 8001396:	e7df      	b.n	8001358 <_puts_r+0x84>
 8001398:	6823      	ldr	r3, [r4, #0]
 800139a:	250a      	movs	r5, #10
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	6022      	str	r2, [r4, #0]
 80013a0:	701d      	strb	r5, [r3, #0]
 80013a2:	e7db      	b.n	800135c <_puts_r+0x88>
 80013a4:	080023c0 	.word	0x080023c0
 80013a8:	080023e0 	.word	0x080023e0
 80013ac:	080023a0 	.word	0x080023a0

080013b0 <puts>:
 80013b0:	4b02      	ldr	r3, [pc, #8]	; (80013bc <puts+0xc>)
 80013b2:	4601      	mov	r1, r0
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	f7ff bf8d 	b.w	80012d4 <_puts_r>
 80013ba:	bf00      	nop
 80013bc:	20000014 	.word	0x20000014

080013c0 <__swbuf_r>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	460e      	mov	r6, r1
 80013c4:	4614      	mov	r4, r2
 80013c6:	4605      	mov	r5, r0
 80013c8:	b118      	cbz	r0, 80013d2 <__swbuf_r+0x12>
 80013ca:	6983      	ldr	r3, [r0, #24]
 80013cc:	b90b      	cbnz	r3, 80013d2 <__swbuf_r+0x12>
 80013ce:	f000 f9d1 	bl	8001774 <__sinit>
 80013d2:	4b21      	ldr	r3, [pc, #132]	; (8001458 <__swbuf_r+0x98>)
 80013d4:	429c      	cmp	r4, r3
 80013d6:	d12b      	bne.n	8001430 <__swbuf_r+0x70>
 80013d8:	686c      	ldr	r4, [r5, #4]
 80013da:	69a3      	ldr	r3, [r4, #24]
 80013dc:	60a3      	str	r3, [r4, #8]
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	071a      	lsls	r2, r3, #28
 80013e2:	d52f      	bpl.n	8001444 <__swbuf_r+0x84>
 80013e4:	6923      	ldr	r3, [r4, #16]
 80013e6:	b36b      	cbz	r3, 8001444 <__swbuf_r+0x84>
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	6820      	ldr	r0, [r4, #0]
 80013ec:	1ac0      	subs	r0, r0, r3
 80013ee:	6963      	ldr	r3, [r4, #20]
 80013f0:	b2f6      	uxtb	r6, r6
 80013f2:	4283      	cmp	r3, r0
 80013f4:	4637      	mov	r7, r6
 80013f6:	dc04      	bgt.n	8001402 <__swbuf_r+0x42>
 80013f8:	4621      	mov	r1, r4
 80013fa:	4628      	mov	r0, r5
 80013fc:	f000 f926 	bl	800164c <_fflush_r>
 8001400:	bb30      	cbnz	r0, 8001450 <__swbuf_r+0x90>
 8001402:	68a3      	ldr	r3, [r4, #8]
 8001404:	3b01      	subs	r3, #1
 8001406:	60a3      	str	r3, [r4, #8]
 8001408:	6823      	ldr	r3, [r4, #0]
 800140a:	1c5a      	adds	r2, r3, #1
 800140c:	6022      	str	r2, [r4, #0]
 800140e:	701e      	strb	r6, [r3, #0]
 8001410:	6963      	ldr	r3, [r4, #20]
 8001412:	3001      	adds	r0, #1
 8001414:	4283      	cmp	r3, r0
 8001416:	d004      	beq.n	8001422 <__swbuf_r+0x62>
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	07db      	lsls	r3, r3, #31
 800141c:	d506      	bpl.n	800142c <__swbuf_r+0x6c>
 800141e:	2e0a      	cmp	r6, #10
 8001420:	d104      	bne.n	800142c <__swbuf_r+0x6c>
 8001422:	4621      	mov	r1, r4
 8001424:	4628      	mov	r0, r5
 8001426:	f000 f911 	bl	800164c <_fflush_r>
 800142a:	b988      	cbnz	r0, 8001450 <__swbuf_r+0x90>
 800142c:	4638      	mov	r0, r7
 800142e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <__swbuf_r+0x9c>)
 8001432:	429c      	cmp	r4, r3
 8001434:	d101      	bne.n	800143a <__swbuf_r+0x7a>
 8001436:	68ac      	ldr	r4, [r5, #8]
 8001438:	e7cf      	b.n	80013da <__swbuf_r+0x1a>
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <__swbuf_r+0xa0>)
 800143c:	429c      	cmp	r4, r3
 800143e:	bf08      	it	eq
 8001440:	68ec      	ldreq	r4, [r5, #12]
 8001442:	e7ca      	b.n	80013da <__swbuf_r+0x1a>
 8001444:	4621      	mov	r1, r4
 8001446:	4628      	mov	r0, r5
 8001448:	f000 f80c 	bl	8001464 <__swsetup_r>
 800144c:	2800      	cmp	r0, #0
 800144e:	d0cb      	beq.n	80013e8 <__swbuf_r+0x28>
 8001450:	f04f 37ff 	mov.w	r7, #4294967295
 8001454:	e7ea      	b.n	800142c <__swbuf_r+0x6c>
 8001456:	bf00      	nop
 8001458:	080023c0 	.word	0x080023c0
 800145c:	080023e0 	.word	0x080023e0
 8001460:	080023a0 	.word	0x080023a0

08001464 <__swsetup_r>:
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <__swsetup_r+0xcc>)
 8001466:	b570      	push	{r4, r5, r6, lr}
 8001468:	681d      	ldr	r5, [r3, #0]
 800146a:	4606      	mov	r6, r0
 800146c:	460c      	mov	r4, r1
 800146e:	b125      	cbz	r5, 800147a <__swsetup_r+0x16>
 8001470:	69ab      	ldr	r3, [r5, #24]
 8001472:	b913      	cbnz	r3, 800147a <__swsetup_r+0x16>
 8001474:	4628      	mov	r0, r5
 8001476:	f000 f97d 	bl	8001774 <__sinit>
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <__swsetup_r+0xd0>)
 800147c:	429c      	cmp	r4, r3
 800147e:	d10f      	bne.n	80014a0 <__swsetup_r+0x3c>
 8001480:	686c      	ldr	r4, [r5, #4]
 8001482:	89a3      	ldrh	r3, [r4, #12]
 8001484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001488:	0719      	lsls	r1, r3, #28
 800148a:	d42c      	bmi.n	80014e6 <__swsetup_r+0x82>
 800148c:	06dd      	lsls	r5, r3, #27
 800148e:	d411      	bmi.n	80014b4 <__swsetup_r+0x50>
 8001490:	2309      	movs	r3, #9
 8001492:	6033      	str	r3, [r6, #0]
 8001494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001498:	81a3      	strh	r3, [r4, #12]
 800149a:	f04f 30ff 	mov.w	r0, #4294967295
 800149e:	e03e      	b.n	800151e <__swsetup_r+0xba>
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <__swsetup_r+0xd4>)
 80014a2:	429c      	cmp	r4, r3
 80014a4:	d101      	bne.n	80014aa <__swsetup_r+0x46>
 80014a6:	68ac      	ldr	r4, [r5, #8]
 80014a8:	e7eb      	b.n	8001482 <__swsetup_r+0x1e>
 80014aa:	4b24      	ldr	r3, [pc, #144]	; (800153c <__swsetup_r+0xd8>)
 80014ac:	429c      	cmp	r4, r3
 80014ae:	bf08      	it	eq
 80014b0:	68ec      	ldreq	r4, [r5, #12]
 80014b2:	e7e6      	b.n	8001482 <__swsetup_r+0x1e>
 80014b4:	0758      	lsls	r0, r3, #29
 80014b6:	d512      	bpl.n	80014de <__swsetup_r+0x7a>
 80014b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014ba:	b141      	cbz	r1, 80014ce <__swsetup_r+0x6a>
 80014bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014c0:	4299      	cmp	r1, r3
 80014c2:	d002      	beq.n	80014ca <__swsetup_r+0x66>
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 fa59 	bl	800197c <_free_r>
 80014ca:	2300      	movs	r3, #0
 80014cc:	6363      	str	r3, [r4, #52]	; 0x34
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014d4:	81a3      	strh	r3, [r4, #12]
 80014d6:	2300      	movs	r3, #0
 80014d8:	6063      	str	r3, [r4, #4]
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	89a3      	ldrh	r3, [r4, #12]
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	81a3      	strh	r3, [r4, #12]
 80014e6:	6923      	ldr	r3, [r4, #16]
 80014e8:	b94b      	cbnz	r3, 80014fe <__swsetup_r+0x9a>
 80014ea:	89a3      	ldrh	r3, [r4, #12]
 80014ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f4:	d003      	beq.n	80014fe <__swsetup_r+0x9a>
 80014f6:	4621      	mov	r1, r4
 80014f8:	4630      	mov	r0, r6
 80014fa:	f000 f9ff 	bl	80018fc <__smakebuf_r>
 80014fe:	89a0      	ldrh	r0, [r4, #12]
 8001500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001504:	f010 0301 	ands.w	r3, r0, #1
 8001508:	d00a      	beq.n	8001520 <__swsetup_r+0xbc>
 800150a:	2300      	movs	r3, #0
 800150c:	60a3      	str	r3, [r4, #8]
 800150e:	6963      	ldr	r3, [r4, #20]
 8001510:	425b      	negs	r3, r3
 8001512:	61a3      	str	r3, [r4, #24]
 8001514:	6923      	ldr	r3, [r4, #16]
 8001516:	b943      	cbnz	r3, 800152a <__swsetup_r+0xc6>
 8001518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800151c:	d1ba      	bne.n	8001494 <__swsetup_r+0x30>
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	0781      	lsls	r1, r0, #30
 8001522:	bf58      	it	pl
 8001524:	6963      	ldrpl	r3, [r4, #20]
 8001526:	60a3      	str	r3, [r4, #8]
 8001528:	e7f4      	b.n	8001514 <__swsetup_r+0xb0>
 800152a:	2000      	movs	r0, #0
 800152c:	e7f7      	b.n	800151e <__swsetup_r+0xba>
 800152e:	bf00      	nop
 8001530:	20000014 	.word	0x20000014
 8001534:	080023c0 	.word	0x080023c0
 8001538:	080023e0 	.word	0x080023e0
 800153c:	080023a0 	.word	0x080023a0

08001540 <__sflush_r>:
 8001540:	898a      	ldrh	r2, [r1, #12]
 8001542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001546:	4605      	mov	r5, r0
 8001548:	0710      	lsls	r0, r2, #28
 800154a:	460c      	mov	r4, r1
 800154c:	d458      	bmi.n	8001600 <__sflush_r+0xc0>
 800154e:	684b      	ldr	r3, [r1, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	dc05      	bgt.n	8001560 <__sflush_r+0x20>
 8001554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001556:	2b00      	cmp	r3, #0
 8001558:	dc02      	bgt.n	8001560 <__sflush_r+0x20>
 800155a:	2000      	movs	r0, #0
 800155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001562:	2e00      	cmp	r6, #0
 8001564:	d0f9      	beq.n	800155a <__sflush_r+0x1a>
 8001566:	2300      	movs	r3, #0
 8001568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800156c:	682f      	ldr	r7, [r5, #0]
 800156e:	602b      	str	r3, [r5, #0]
 8001570:	d032      	beq.n	80015d8 <__sflush_r+0x98>
 8001572:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	075a      	lsls	r2, r3, #29
 8001578:	d505      	bpl.n	8001586 <__sflush_r+0x46>
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	1ac0      	subs	r0, r0, r3
 800157e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001580:	b10b      	cbz	r3, 8001586 <__sflush_r+0x46>
 8001582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001584:	1ac0      	subs	r0, r0, r3
 8001586:	2300      	movs	r3, #0
 8001588:	4602      	mov	r2, r0
 800158a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800158c:	6a21      	ldr	r1, [r4, #32]
 800158e:	4628      	mov	r0, r5
 8001590:	47b0      	blx	r6
 8001592:	1c43      	adds	r3, r0, #1
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	d106      	bne.n	80015a6 <__sflush_r+0x66>
 8001598:	6829      	ldr	r1, [r5, #0]
 800159a:	291d      	cmp	r1, #29
 800159c:	d82c      	bhi.n	80015f8 <__sflush_r+0xb8>
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <__sflush_r+0x108>)
 80015a0:	40ca      	lsrs	r2, r1
 80015a2:	07d6      	lsls	r6, r2, #31
 80015a4:	d528      	bpl.n	80015f8 <__sflush_r+0xb8>
 80015a6:	2200      	movs	r2, #0
 80015a8:	6062      	str	r2, [r4, #4]
 80015aa:	04d9      	lsls	r1, r3, #19
 80015ac:	6922      	ldr	r2, [r4, #16]
 80015ae:	6022      	str	r2, [r4, #0]
 80015b0:	d504      	bpl.n	80015bc <__sflush_r+0x7c>
 80015b2:	1c42      	adds	r2, r0, #1
 80015b4:	d101      	bne.n	80015ba <__sflush_r+0x7a>
 80015b6:	682b      	ldr	r3, [r5, #0]
 80015b8:	b903      	cbnz	r3, 80015bc <__sflush_r+0x7c>
 80015ba:	6560      	str	r0, [r4, #84]	; 0x54
 80015bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015be:	602f      	str	r7, [r5, #0]
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d0ca      	beq.n	800155a <__sflush_r+0x1a>
 80015c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015c8:	4299      	cmp	r1, r3
 80015ca:	d002      	beq.n	80015d2 <__sflush_r+0x92>
 80015cc:	4628      	mov	r0, r5
 80015ce:	f000 f9d5 	bl	800197c <_free_r>
 80015d2:	2000      	movs	r0, #0
 80015d4:	6360      	str	r0, [r4, #52]	; 0x34
 80015d6:	e7c1      	b.n	800155c <__sflush_r+0x1c>
 80015d8:	6a21      	ldr	r1, [r4, #32]
 80015da:	2301      	movs	r3, #1
 80015dc:	4628      	mov	r0, r5
 80015de:	47b0      	blx	r6
 80015e0:	1c41      	adds	r1, r0, #1
 80015e2:	d1c7      	bne.n	8001574 <__sflush_r+0x34>
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0c4      	beq.n	8001574 <__sflush_r+0x34>
 80015ea:	2b1d      	cmp	r3, #29
 80015ec:	d001      	beq.n	80015f2 <__sflush_r+0xb2>
 80015ee:	2b16      	cmp	r3, #22
 80015f0:	d101      	bne.n	80015f6 <__sflush_r+0xb6>
 80015f2:	602f      	str	r7, [r5, #0]
 80015f4:	e7b1      	b.n	800155a <__sflush_r+0x1a>
 80015f6:	89a3      	ldrh	r3, [r4, #12]
 80015f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015fc:	81a3      	strh	r3, [r4, #12]
 80015fe:	e7ad      	b.n	800155c <__sflush_r+0x1c>
 8001600:	690f      	ldr	r7, [r1, #16]
 8001602:	2f00      	cmp	r7, #0
 8001604:	d0a9      	beq.n	800155a <__sflush_r+0x1a>
 8001606:	0793      	lsls	r3, r2, #30
 8001608:	680e      	ldr	r6, [r1, #0]
 800160a:	bf08      	it	eq
 800160c:	694b      	ldreq	r3, [r1, #20]
 800160e:	600f      	str	r7, [r1, #0]
 8001610:	bf18      	it	ne
 8001612:	2300      	movne	r3, #0
 8001614:	eba6 0807 	sub.w	r8, r6, r7
 8001618:	608b      	str	r3, [r1, #8]
 800161a:	f1b8 0f00 	cmp.w	r8, #0
 800161e:	dd9c      	ble.n	800155a <__sflush_r+0x1a>
 8001620:	6a21      	ldr	r1, [r4, #32]
 8001622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001624:	4643      	mov	r3, r8
 8001626:	463a      	mov	r2, r7
 8001628:	4628      	mov	r0, r5
 800162a:	47b0      	blx	r6
 800162c:	2800      	cmp	r0, #0
 800162e:	dc06      	bgt.n	800163e <__sflush_r+0xfe>
 8001630:	89a3      	ldrh	r3, [r4, #12]
 8001632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001636:	81a3      	strh	r3, [r4, #12]
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	e78e      	b.n	800155c <__sflush_r+0x1c>
 800163e:	4407      	add	r7, r0
 8001640:	eba8 0800 	sub.w	r8, r8, r0
 8001644:	e7e9      	b.n	800161a <__sflush_r+0xda>
 8001646:	bf00      	nop
 8001648:	20400001 	.word	0x20400001

0800164c <_fflush_r>:
 800164c:	b538      	push	{r3, r4, r5, lr}
 800164e:	690b      	ldr	r3, [r1, #16]
 8001650:	4605      	mov	r5, r0
 8001652:	460c      	mov	r4, r1
 8001654:	b913      	cbnz	r3, 800165c <_fflush_r+0x10>
 8001656:	2500      	movs	r5, #0
 8001658:	4628      	mov	r0, r5
 800165a:	bd38      	pop	{r3, r4, r5, pc}
 800165c:	b118      	cbz	r0, 8001666 <_fflush_r+0x1a>
 800165e:	6983      	ldr	r3, [r0, #24]
 8001660:	b90b      	cbnz	r3, 8001666 <_fflush_r+0x1a>
 8001662:	f000 f887 	bl	8001774 <__sinit>
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <_fflush_r+0x6c>)
 8001668:	429c      	cmp	r4, r3
 800166a:	d11b      	bne.n	80016a4 <_fflush_r+0x58>
 800166c:	686c      	ldr	r4, [r5, #4]
 800166e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ef      	beq.n	8001656 <_fflush_r+0xa>
 8001676:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001678:	07d0      	lsls	r0, r2, #31
 800167a:	d404      	bmi.n	8001686 <_fflush_r+0x3a>
 800167c:	0599      	lsls	r1, r3, #22
 800167e:	d402      	bmi.n	8001686 <_fflush_r+0x3a>
 8001680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001682:	f000 f915 	bl	80018b0 <__retarget_lock_acquire_recursive>
 8001686:	4628      	mov	r0, r5
 8001688:	4621      	mov	r1, r4
 800168a:	f7ff ff59 	bl	8001540 <__sflush_r>
 800168e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001690:	07da      	lsls	r2, r3, #31
 8001692:	4605      	mov	r5, r0
 8001694:	d4e0      	bmi.n	8001658 <_fflush_r+0xc>
 8001696:	89a3      	ldrh	r3, [r4, #12]
 8001698:	059b      	lsls	r3, r3, #22
 800169a:	d4dd      	bmi.n	8001658 <_fflush_r+0xc>
 800169c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800169e:	f000 f908 	bl	80018b2 <__retarget_lock_release_recursive>
 80016a2:	e7d9      	b.n	8001658 <_fflush_r+0xc>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <_fflush_r+0x70>)
 80016a6:	429c      	cmp	r4, r3
 80016a8:	d101      	bne.n	80016ae <_fflush_r+0x62>
 80016aa:	68ac      	ldr	r4, [r5, #8]
 80016ac:	e7df      	b.n	800166e <_fflush_r+0x22>
 80016ae:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <_fflush_r+0x74>)
 80016b0:	429c      	cmp	r4, r3
 80016b2:	bf08      	it	eq
 80016b4:	68ec      	ldreq	r4, [r5, #12]
 80016b6:	e7da      	b.n	800166e <_fflush_r+0x22>
 80016b8:	080023c0 	.word	0x080023c0
 80016bc:	080023e0 	.word	0x080023e0
 80016c0:	080023a0 	.word	0x080023a0

080016c4 <std>:
 80016c4:	2300      	movs	r3, #0
 80016c6:	b510      	push	{r4, lr}
 80016c8:	4604      	mov	r4, r0
 80016ca:	e9c0 3300 	strd	r3, r3, [r0]
 80016ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016d2:	6083      	str	r3, [r0, #8]
 80016d4:	8181      	strh	r1, [r0, #12]
 80016d6:	6643      	str	r3, [r0, #100]	; 0x64
 80016d8:	81c2      	strh	r2, [r0, #14]
 80016da:	6183      	str	r3, [r0, #24]
 80016dc:	4619      	mov	r1, r3
 80016de:	2208      	movs	r2, #8
 80016e0:	305c      	adds	r0, #92	; 0x5c
 80016e2:	f7ff fdd7 	bl	8001294 <memset>
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <std+0x38>)
 80016e8:	6263      	str	r3, [r4, #36]	; 0x24
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <std+0x3c>)
 80016ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <std+0x40>)
 80016f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <std+0x44>)
 80016f4:	6224      	str	r4, [r4, #32]
 80016f6:	6323      	str	r3, [r4, #48]	; 0x30
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	bf00      	nop
 80016fc:	080020cd 	.word	0x080020cd
 8001700:	080020ef 	.word	0x080020ef
 8001704:	08002127 	.word	0x08002127
 8001708:	0800214b 	.word	0x0800214b

0800170c <_cleanup_r>:
 800170c:	4901      	ldr	r1, [pc, #4]	; (8001714 <_cleanup_r+0x8>)
 800170e:	f000 b8af 	b.w	8001870 <_fwalk_reent>
 8001712:	bf00      	nop
 8001714:	0800164d 	.word	0x0800164d

08001718 <__sfmoreglue>:
 8001718:	b570      	push	{r4, r5, r6, lr}
 800171a:	1e4a      	subs	r2, r1, #1
 800171c:	2568      	movs	r5, #104	; 0x68
 800171e:	4355      	muls	r5, r2
 8001720:	460e      	mov	r6, r1
 8001722:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001726:	f000 f979 	bl	8001a1c <_malloc_r>
 800172a:	4604      	mov	r4, r0
 800172c:	b140      	cbz	r0, 8001740 <__sfmoreglue+0x28>
 800172e:	2100      	movs	r1, #0
 8001730:	e9c0 1600 	strd	r1, r6, [r0]
 8001734:	300c      	adds	r0, #12
 8001736:	60a0      	str	r0, [r4, #8]
 8001738:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800173c:	f7ff fdaa 	bl	8001294 <memset>
 8001740:	4620      	mov	r0, r4
 8001742:	bd70      	pop	{r4, r5, r6, pc}

08001744 <__sfp_lock_acquire>:
 8001744:	4801      	ldr	r0, [pc, #4]	; (800174c <__sfp_lock_acquire+0x8>)
 8001746:	f000 b8b3 	b.w	80018b0 <__retarget_lock_acquire_recursive>
 800174a:	bf00      	nop
 800174c:	200000d4 	.word	0x200000d4

08001750 <__sfp_lock_release>:
 8001750:	4801      	ldr	r0, [pc, #4]	; (8001758 <__sfp_lock_release+0x8>)
 8001752:	f000 b8ae 	b.w	80018b2 <__retarget_lock_release_recursive>
 8001756:	bf00      	nop
 8001758:	200000d4 	.word	0x200000d4

0800175c <__sinit_lock_acquire>:
 800175c:	4801      	ldr	r0, [pc, #4]	; (8001764 <__sinit_lock_acquire+0x8>)
 800175e:	f000 b8a7 	b.w	80018b0 <__retarget_lock_acquire_recursive>
 8001762:	bf00      	nop
 8001764:	200000cf 	.word	0x200000cf

08001768 <__sinit_lock_release>:
 8001768:	4801      	ldr	r0, [pc, #4]	; (8001770 <__sinit_lock_release+0x8>)
 800176a:	f000 b8a2 	b.w	80018b2 <__retarget_lock_release_recursive>
 800176e:	bf00      	nop
 8001770:	200000cf 	.word	0x200000cf

08001774 <__sinit>:
 8001774:	b510      	push	{r4, lr}
 8001776:	4604      	mov	r4, r0
 8001778:	f7ff fff0 	bl	800175c <__sinit_lock_acquire>
 800177c:	69a3      	ldr	r3, [r4, #24]
 800177e:	b11b      	cbz	r3, 8001788 <__sinit+0x14>
 8001780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001784:	f7ff bff0 	b.w	8001768 <__sinit_lock_release>
 8001788:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800178c:	6523      	str	r3, [r4, #80]	; 0x50
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <__sinit+0x68>)
 8001790:	4a13      	ldr	r2, [pc, #76]	; (80017e0 <__sinit+0x6c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	62a2      	str	r2, [r4, #40]	; 0x28
 8001796:	42a3      	cmp	r3, r4
 8001798:	bf04      	itt	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	61a3      	streq	r3, [r4, #24]
 800179e:	4620      	mov	r0, r4
 80017a0:	f000 f820 	bl	80017e4 <__sfp>
 80017a4:	6060      	str	r0, [r4, #4]
 80017a6:	4620      	mov	r0, r4
 80017a8:	f000 f81c 	bl	80017e4 <__sfp>
 80017ac:	60a0      	str	r0, [r4, #8]
 80017ae:	4620      	mov	r0, r4
 80017b0:	f000 f818 	bl	80017e4 <__sfp>
 80017b4:	2200      	movs	r2, #0
 80017b6:	60e0      	str	r0, [r4, #12]
 80017b8:	2104      	movs	r1, #4
 80017ba:	6860      	ldr	r0, [r4, #4]
 80017bc:	f7ff ff82 	bl	80016c4 <std>
 80017c0:	68a0      	ldr	r0, [r4, #8]
 80017c2:	2201      	movs	r2, #1
 80017c4:	2109      	movs	r1, #9
 80017c6:	f7ff ff7d 	bl	80016c4 <std>
 80017ca:	68e0      	ldr	r0, [r4, #12]
 80017cc:	2202      	movs	r2, #2
 80017ce:	2112      	movs	r1, #18
 80017d0:	f7ff ff78 	bl	80016c4 <std>
 80017d4:	2301      	movs	r3, #1
 80017d6:	61a3      	str	r3, [r4, #24]
 80017d8:	e7d2      	b.n	8001780 <__sinit+0xc>
 80017da:	bf00      	nop
 80017dc:	0800239c 	.word	0x0800239c
 80017e0:	0800170d 	.word	0x0800170d

080017e4 <__sfp>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	4607      	mov	r7, r0
 80017e8:	f7ff ffac 	bl	8001744 <__sfp_lock_acquire>
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <__sfp+0x84>)
 80017ee:	681e      	ldr	r6, [r3, #0]
 80017f0:	69b3      	ldr	r3, [r6, #24]
 80017f2:	b913      	cbnz	r3, 80017fa <__sfp+0x16>
 80017f4:	4630      	mov	r0, r6
 80017f6:	f7ff ffbd 	bl	8001774 <__sinit>
 80017fa:	3648      	adds	r6, #72	; 0x48
 80017fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001800:	3b01      	subs	r3, #1
 8001802:	d503      	bpl.n	800180c <__sfp+0x28>
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	b30b      	cbz	r3, 800184c <__sfp+0x68>
 8001808:	6836      	ldr	r6, [r6, #0]
 800180a:	e7f7      	b.n	80017fc <__sfp+0x18>
 800180c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001810:	b9d5      	cbnz	r5, 8001848 <__sfp+0x64>
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <__sfp+0x88>)
 8001814:	60e3      	str	r3, [r4, #12]
 8001816:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800181a:	6665      	str	r5, [r4, #100]	; 0x64
 800181c:	f000 f847 	bl	80018ae <__retarget_lock_init_recursive>
 8001820:	f7ff ff96 	bl	8001750 <__sfp_lock_release>
 8001824:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001828:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800182c:	6025      	str	r5, [r4, #0]
 800182e:	61a5      	str	r5, [r4, #24]
 8001830:	2208      	movs	r2, #8
 8001832:	4629      	mov	r1, r5
 8001834:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001838:	f7ff fd2c 	bl	8001294 <memset>
 800183c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001840:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001844:	4620      	mov	r0, r4
 8001846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001848:	3468      	adds	r4, #104	; 0x68
 800184a:	e7d9      	b.n	8001800 <__sfp+0x1c>
 800184c:	2104      	movs	r1, #4
 800184e:	4638      	mov	r0, r7
 8001850:	f7ff ff62 	bl	8001718 <__sfmoreglue>
 8001854:	4604      	mov	r4, r0
 8001856:	6030      	str	r0, [r6, #0]
 8001858:	2800      	cmp	r0, #0
 800185a:	d1d5      	bne.n	8001808 <__sfp+0x24>
 800185c:	f7ff ff78 	bl	8001750 <__sfp_lock_release>
 8001860:	230c      	movs	r3, #12
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	e7ee      	b.n	8001844 <__sfp+0x60>
 8001866:	bf00      	nop
 8001868:	0800239c 	.word	0x0800239c
 800186c:	ffff0001 	.word	0xffff0001

08001870 <_fwalk_reent>:
 8001870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001874:	4606      	mov	r6, r0
 8001876:	4688      	mov	r8, r1
 8001878:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800187c:	2700      	movs	r7, #0
 800187e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001882:	f1b9 0901 	subs.w	r9, r9, #1
 8001886:	d505      	bpl.n	8001894 <_fwalk_reent+0x24>
 8001888:	6824      	ldr	r4, [r4, #0]
 800188a:	2c00      	cmp	r4, #0
 800188c:	d1f7      	bne.n	800187e <_fwalk_reent+0xe>
 800188e:	4638      	mov	r0, r7
 8001890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001894:	89ab      	ldrh	r3, [r5, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d907      	bls.n	80018aa <_fwalk_reent+0x3a>
 800189a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800189e:	3301      	adds	r3, #1
 80018a0:	d003      	beq.n	80018aa <_fwalk_reent+0x3a>
 80018a2:	4629      	mov	r1, r5
 80018a4:	4630      	mov	r0, r6
 80018a6:	47c0      	blx	r8
 80018a8:	4307      	orrs	r7, r0
 80018aa:	3568      	adds	r5, #104	; 0x68
 80018ac:	e7e9      	b.n	8001882 <_fwalk_reent+0x12>

080018ae <__retarget_lock_init_recursive>:
 80018ae:	4770      	bx	lr

080018b0 <__retarget_lock_acquire_recursive>:
 80018b0:	4770      	bx	lr

080018b2 <__retarget_lock_release_recursive>:
 80018b2:	4770      	bx	lr

080018b4 <__swhatbuf_r>:
 80018b4:	b570      	push	{r4, r5, r6, lr}
 80018b6:	460e      	mov	r6, r1
 80018b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018bc:	2900      	cmp	r1, #0
 80018be:	b096      	sub	sp, #88	; 0x58
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	da07      	bge.n	80018d6 <__swhatbuf_r+0x22>
 80018c6:	2300      	movs	r3, #0
 80018c8:	602b      	str	r3, [r5, #0]
 80018ca:	89b3      	ldrh	r3, [r6, #12]
 80018cc:	061a      	lsls	r2, r3, #24
 80018ce:	d410      	bmi.n	80018f2 <__swhatbuf_r+0x3e>
 80018d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018d4:	e00e      	b.n	80018f4 <__swhatbuf_r+0x40>
 80018d6:	466a      	mov	r2, sp
 80018d8:	f000 fc5e 	bl	8002198 <_fstat_r>
 80018dc:	2800      	cmp	r0, #0
 80018de:	dbf2      	blt.n	80018c6 <__swhatbuf_r+0x12>
 80018e0:	9a01      	ldr	r2, [sp, #4]
 80018e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80018e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80018ea:	425a      	negs	r2, r3
 80018ec:	415a      	adcs	r2, r3
 80018ee:	602a      	str	r2, [r5, #0]
 80018f0:	e7ee      	b.n	80018d0 <__swhatbuf_r+0x1c>
 80018f2:	2340      	movs	r3, #64	; 0x40
 80018f4:	2000      	movs	r0, #0
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	b016      	add	sp, #88	; 0x58
 80018fa:	bd70      	pop	{r4, r5, r6, pc}

080018fc <__smakebuf_r>:
 80018fc:	898b      	ldrh	r3, [r1, #12]
 80018fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001900:	079d      	lsls	r5, r3, #30
 8001902:	4606      	mov	r6, r0
 8001904:	460c      	mov	r4, r1
 8001906:	d507      	bpl.n	8001918 <__smakebuf_r+0x1c>
 8001908:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	6123      	str	r3, [r4, #16]
 8001910:	2301      	movs	r3, #1
 8001912:	6163      	str	r3, [r4, #20]
 8001914:	b002      	add	sp, #8
 8001916:	bd70      	pop	{r4, r5, r6, pc}
 8001918:	ab01      	add	r3, sp, #4
 800191a:	466a      	mov	r2, sp
 800191c:	f7ff ffca 	bl	80018b4 <__swhatbuf_r>
 8001920:	9900      	ldr	r1, [sp, #0]
 8001922:	4605      	mov	r5, r0
 8001924:	4630      	mov	r0, r6
 8001926:	f000 f879 	bl	8001a1c <_malloc_r>
 800192a:	b948      	cbnz	r0, 8001940 <__smakebuf_r+0x44>
 800192c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001930:	059a      	lsls	r2, r3, #22
 8001932:	d4ef      	bmi.n	8001914 <__smakebuf_r+0x18>
 8001934:	f023 0303 	bic.w	r3, r3, #3
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	81a3      	strh	r3, [r4, #12]
 800193e:	e7e3      	b.n	8001908 <__smakebuf_r+0xc>
 8001940:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <__smakebuf_r+0x7c>)
 8001942:	62b3      	str	r3, [r6, #40]	; 0x28
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	6020      	str	r0, [r4, #0]
 8001948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194c:	81a3      	strh	r3, [r4, #12]
 800194e:	9b00      	ldr	r3, [sp, #0]
 8001950:	6163      	str	r3, [r4, #20]
 8001952:	9b01      	ldr	r3, [sp, #4]
 8001954:	6120      	str	r0, [r4, #16]
 8001956:	b15b      	cbz	r3, 8001970 <__smakebuf_r+0x74>
 8001958:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800195c:	4630      	mov	r0, r6
 800195e:	f000 fc2d 	bl	80021bc <_isatty_r>
 8001962:	b128      	cbz	r0, 8001970 <__smakebuf_r+0x74>
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	f023 0303 	bic.w	r3, r3, #3
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	81a3      	strh	r3, [r4, #12]
 8001970:	89a0      	ldrh	r0, [r4, #12]
 8001972:	4305      	orrs	r5, r0
 8001974:	81a5      	strh	r5, [r4, #12]
 8001976:	e7cd      	b.n	8001914 <__smakebuf_r+0x18>
 8001978:	0800170d 	.word	0x0800170d

0800197c <_free_r>:
 800197c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800197e:	2900      	cmp	r1, #0
 8001980:	d048      	beq.n	8001a14 <_free_r+0x98>
 8001982:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001986:	9001      	str	r0, [sp, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	f1a1 0404 	sub.w	r4, r1, #4
 800198e:	bfb8      	it	lt
 8001990:	18e4      	addlt	r4, r4, r3
 8001992:	f000 fc35 	bl	8002200 <__malloc_lock>
 8001996:	4a20      	ldr	r2, [pc, #128]	; (8001a18 <_free_r+0x9c>)
 8001998:	9801      	ldr	r0, [sp, #4]
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	4615      	mov	r5, r2
 800199e:	b933      	cbnz	r3, 80019ae <_free_r+0x32>
 80019a0:	6063      	str	r3, [r4, #4]
 80019a2:	6014      	str	r4, [r2, #0]
 80019a4:	b003      	add	sp, #12
 80019a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019aa:	f000 bc2f 	b.w	800220c <__malloc_unlock>
 80019ae:	42a3      	cmp	r3, r4
 80019b0:	d90b      	bls.n	80019ca <_free_r+0x4e>
 80019b2:	6821      	ldr	r1, [r4, #0]
 80019b4:	1862      	adds	r2, r4, r1
 80019b6:	4293      	cmp	r3, r2
 80019b8:	bf04      	itt	eq
 80019ba:	681a      	ldreq	r2, [r3, #0]
 80019bc:	685b      	ldreq	r3, [r3, #4]
 80019be:	6063      	str	r3, [r4, #4]
 80019c0:	bf04      	itt	eq
 80019c2:	1852      	addeq	r2, r2, r1
 80019c4:	6022      	streq	r2, [r4, #0]
 80019c6:	602c      	str	r4, [r5, #0]
 80019c8:	e7ec      	b.n	80019a4 <_free_r+0x28>
 80019ca:	461a      	mov	r2, r3
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	b10b      	cbz	r3, 80019d4 <_free_r+0x58>
 80019d0:	42a3      	cmp	r3, r4
 80019d2:	d9fa      	bls.n	80019ca <_free_r+0x4e>
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	1855      	adds	r5, r2, r1
 80019d8:	42a5      	cmp	r5, r4
 80019da:	d10b      	bne.n	80019f4 <_free_r+0x78>
 80019dc:	6824      	ldr	r4, [r4, #0]
 80019de:	4421      	add	r1, r4
 80019e0:	1854      	adds	r4, r2, r1
 80019e2:	42a3      	cmp	r3, r4
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	d1dd      	bne.n	80019a4 <_free_r+0x28>
 80019e8:	681c      	ldr	r4, [r3, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	6053      	str	r3, [r2, #4]
 80019ee:	4421      	add	r1, r4
 80019f0:	6011      	str	r1, [r2, #0]
 80019f2:	e7d7      	b.n	80019a4 <_free_r+0x28>
 80019f4:	d902      	bls.n	80019fc <_free_r+0x80>
 80019f6:	230c      	movs	r3, #12
 80019f8:	6003      	str	r3, [r0, #0]
 80019fa:	e7d3      	b.n	80019a4 <_free_r+0x28>
 80019fc:	6825      	ldr	r5, [r4, #0]
 80019fe:	1961      	adds	r1, r4, r5
 8001a00:	428b      	cmp	r3, r1
 8001a02:	bf04      	itt	eq
 8001a04:	6819      	ldreq	r1, [r3, #0]
 8001a06:	685b      	ldreq	r3, [r3, #4]
 8001a08:	6063      	str	r3, [r4, #4]
 8001a0a:	bf04      	itt	eq
 8001a0c:	1949      	addeq	r1, r1, r5
 8001a0e:	6021      	streq	r1, [r4, #0]
 8001a10:	6054      	str	r4, [r2, #4]
 8001a12:	e7c7      	b.n	80019a4 <_free_r+0x28>
 8001a14:	b003      	add	sp, #12
 8001a16:	bd30      	pop	{r4, r5, pc}
 8001a18:	20000094 	.word	0x20000094

08001a1c <_malloc_r>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	1ccd      	adds	r5, r1, #3
 8001a20:	f025 0503 	bic.w	r5, r5, #3
 8001a24:	3508      	adds	r5, #8
 8001a26:	2d0c      	cmp	r5, #12
 8001a28:	bf38      	it	cc
 8001a2a:	250c      	movcc	r5, #12
 8001a2c:	2d00      	cmp	r5, #0
 8001a2e:	4606      	mov	r6, r0
 8001a30:	db01      	blt.n	8001a36 <_malloc_r+0x1a>
 8001a32:	42a9      	cmp	r1, r5
 8001a34:	d903      	bls.n	8001a3e <_malloc_r+0x22>
 8001a36:	230c      	movs	r3, #12
 8001a38:	6033      	str	r3, [r6, #0]
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a3e:	f000 fbdf 	bl	8002200 <__malloc_lock>
 8001a42:	4921      	ldr	r1, [pc, #132]	; (8001ac8 <_malloc_r+0xac>)
 8001a44:	680a      	ldr	r2, [r1, #0]
 8001a46:	4614      	mov	r4, r2
 8001a48:	b99c      	cbnz	r4, 8001a72 <_malloc_r+0x56>
 8001a4a:	4f20      	ldr	r7, [pc, #128]	; (8001acc <_malloc_r+0xb0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b923      	cbnz	r3, 8001a5a <_malloc_r+0x3e>
 8001a50:	4621      	mov	r1, r4
 8001a52:	4630      	mov	r0, r6
 8001a54:	f000 fb2a 	bl	80020ac <_sbrk_r>
 8001a58:	6038      	str	r0, [r7, #0]
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	4630      	mov	r0, r6
 8001a5e:	f000 fb25 	bl	80020ac <_sbrk_r>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d123      	bne.n	8001aae <_malloc_r+0x92>
 8001a66:	230c      	movs	r3, #12
 8001a68:	6033      	str	r3, [r6, #0]
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f000 fbce 	bl	800220c <__malloc_unlock>
 8001a70:	e7e3      	b.n	8001a3a <_malloc_r+0x1e>
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	1b5b      	subs	r3, r3, r5
 8001a76:	d417      	bmi.n	8001aa8 <_malloc_r+0x8c>
 8001a78:	2b0b      	cmp	r3, #11
 8001a7a:	d903      	bls.n	8001a84 <_malloc_r+0x68>
 8001a7c:	6023      	str	r3, [r4, #0]
 8001a7e:	441c      	add	r4, r3
 8001a80:	6025      	str	r5, [r4, #0]
 8001a82:	e004      	b.n	8001a8e <_malloc_r+0x72>
 8001a84:	6863      	ldr	r3, [r4, #4]
 8001a86:	42a2      	cmp	r2, r4
 8001a88:	bf0c      	ite	eq
 8001a8a:	600b      	streq	r3, [r1, #0]
 8001a8c:	6053      	strne	r3, [r2, #4]
 8001a8e:	4630      	mov	r0, r6
 8001a90:	f000 fbbc 	bl	800220c <__malloc_unlock>
 8001a94:	f104 000b 	add.w	r0, r4, #11
 8001a98:	1d23      	adds	r3, r4, #4
 8001a9a:	f020 0007 	bic.w	r0, r0, #7
 8001a9e:	1ac2      	subs	r2, r0, r3
 8001aa0:	d0cc      	beq.n	8001a3c <_malloc_r+0x20>
 8001aa2:	1a1b      	subs	r3, r3, r0
 8001aa4:	50a3      	str	r3, [r4, r2]
 8001aa6:	e7c9      	b.n	8001a3c <_malloc_r+0x20>
 8001aa8:	4622      	mov	r2, r4
 8001aaa:	6864      	ldr	r4, [r4, #4]
 8001aac:	e7cc      	b.n	8001a48 <_malloc_r+0x2c>
 8001aae:	1cc4      	adds	r4, r0, #3
 8001ab0:	f024 0403 	bic.w	r4, r4, #3
 8001ab4:	42a0      	cmp	r0, r4
 8001ab6:	d0e3      	beq.n	8001a80 <_malloc_r+0x64>
 8001ab8:	1a21      	subs	r1, r4, r0
 8001aba:	4630      	mov	r0, r6
 8001abc:	f000 faf6 	bl	80020ac <_sbrk_r>
 8001ac0:	3001      	adds	r0, #1
 8001ac2:	d1dd      	bne.n	8001a80 <_malloc_r+0x64>
 8001ac4:	e7cf      	b.n	8001a66 <_malloc_r+0x4a>
 8001ac6:	bf00      	nop
 8001ac8:	20000094 	.word	0x20000094
 8001acc:	20000098 	.word	0x20000098

08001ad0 <__sfputc_r>:
 8001ad0:	6893      	ldr	r3, [r2, #8]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	b410      	push	{r4}
 8001ad8:	6093      	str	r3, [r2, #8]
 8001ada:	da08      	bge.n	8001aee <__sfputc_r+0x1e>
 8001adc:	6994      	ldr	r4, [r2, #24]
 8001ade:	42a3      	cmp	r3, r4
 8001ae0:	db01      	blt.n	8001ae6 <__sfputc_r+0x16>
 8001ae2:	290a      	cmp	r1, #10
 8001ae4:	d103      	bne.n	8001aee <__sfputc_r+0x1e>
 8001ae6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001aea:	f7ff bc69 	b.w	80013c0 <__swbuf_r>
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	1c58      	adds	r0, r3, #1
 8001af2:	6010      	str	r0, [r2, #0]
 8001af4:	7019      	strb	r1, [r3, #0]
 8001af6:	4608      	mov	r0, r1
 8001af8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <__sfputs_r>:
 8001afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b00:	4606      	mov	r6, r0
 8001b02:	460f      	mov	r7, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	18d5      	adds	r5, r2, r3
 8001b08:	42ac      	cmp	r4, r5
 8001b0a:	d101      	bne.n	8001b10 <__sfputs_r+0x12>
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	e007      	b.n	8001b20 <__sfputs_r+0x22>
 8001b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b14:	463a      	mov	r2, r7
 8001b16:	4630      	mov	r0, r6
 8001b18:	f7ff ffda 	bl	8001ad0 <__sfputc_r>
 8001b1c:	1c43      	adds	r3, r0, #1
 8001b1e:	d1f3      	bne.n	8001b08 <__sfputs_r+0xa>
 8001b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b24 <_vfiprintf_r>:
 8001b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b28:	460d      	mov	r5, r1
 8001b2a:	b09d      	sub	sp, #116	; 0x74
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	4698      	mov	r8, r3
 8001b30:	4606      	mov	r6, r0
 8001b32:	b118      	cbz	r0, 8001b3c <_vfiprintf_r+0x18>
 8001b34:	6983      	ldr	r3, [r0, #24]
 8001b36:	b90b      	cbnz	r3, 8001b3c <_vfiprintf_r+0x18>
 8001b38:	f7ff fe1c 	bl	8001774 <__sinit>
 8001b3c:	4b89      	ldr	r3, [pc, #548]	; (8001d64 <_vfiprintf_r+0x240>)
 8001b3e:	429d      	cmp	r5, r3
 8001b40:	d11b      	bne.n	8001b7a <_vfiprintf_r+0x56>
 8001b42:	6875      	ldr	r5, [r6, #4]
 8001b44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b46:	07d9      	lsls	r1, r3, #31
 8001b48:	d405      	bmi.n	8001b56 <_vfiprintf_r+0x32>
 8001b4a:	89ab      	ldrh	r3, [r5, #12]
 8001b4c:	059a      	lsls	r2, r3, #22
 8001b4e:	d402      	bmi.n	8001b56 <_vfiprintf_r+0x32>
 8001b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b52:	f7ff fead 	bl	80018b0 <__retarget_lock_acquire_recursive>
 8001b56:	89ab      	ldrh	r3, [r5, #12]
 8001b58:	071b      	lsls	r3, r3, #28
 8001b5a:	d501      	bpl.n	8001b60 <_vfiprintf_r+0x3c>
 8001b5c:	692b      	ldr	r3, [r5, #16]
 8001b5e:	b9eb      	cbnz	r3, 8001b9c <_vfiprintf_r+0x78>
 8001b60:	4629      	mov	r1, r5
 8001b62:	4630      	mov	r0, r6
 8001b64:	f7ff fc7e 	bl	8001464 <__swsetup_r>
 8001b68:	b1c0      	cbz	r0, 8001b9c <_vfiprintf_r+0x78>
 8001b6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001b6c:	07dc      	lsls	r4, r3, #31
 8001b6e:	d50e      	bpl.n	8001b8e <_vfiprintf_r+0x6a>
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	b01d      	add	sp, #116	; 0x74
 8001b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	; (8001d68 <_vfiprintf_r+0x244>)
 8001b7c:	429d      	cmp	r5, r3
 8001b7e:	d101      	bne.n	8001b84 <_vfiprintf_r+0x60>
 8001b80:	68b5      	ldr	r5, [r6, #8]
 8001b82:	e7df      	b.n	8001b44 <_vfiprintf_r+0x20>
 8001b84:	4b79      	ldr	r3, [pc, #484]	; (8001d6c <_vfiprintf_r+0x248>)
 8001b86:	429d      	cmp	r5, r3
 8001b88:	bf08      	it	eq
 8001b8a:	68f5      	ldreq	r5, [r6, #12]
 8001b8c:	e7da      	b.n	8001b44 <_vfiprintf_r+0x20>
 8001b8e:	89ab      	ldrh	r3, [r5, #12]
 8001b90:	0598      	lsls	r0, r3, #22
 8001b92:	d4ed      	bmi.n	8001b70 <_vfiprintf_r+0x4c>
 8001b94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001b96:	f7ff fe8c 	bl	80018b2 <__retarget_lock_release_recursive>
 8001b9a:	e7e9      	b.n	8001b70 <_vfiprintf_r+0x4c>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8001ba0:	2320      	movs	r3, #32
 8001ba2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001ba6:	f8cd 800c 	str.w	r8, [sp, #12]
 8001baa:	2330      	movs	r3, #48	; 0x30
 8001bac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001d70 <_vfiprintf_r+0x24c>
 8001bb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001bb4:	f04f 0901 	mov.w	r9, #1
 8001bb8:	4623      	mov	r3, r4
 8001bba:	469a      	mov	sl, r3
 8001bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bc0:	b10a      	cbz	r2, 8001bc6 <_vfiprintf_r+0xa2>
 8001bc2:	2a25      	cmp	r2, #37	; 0x25
 8001bc4:	d1f9      	bne.n	8001bba <_vfiprintf_r+0x96>
 8001bc6:	ebba 0b04 	subs.w	fp, sl, r4
 8001bca:	d00b      	beq.n	8001be4 <_vfiprintf_r+0xc0>
 8001bcc:	465b      	mov	r3, fp
 8001bce:	4622      	mov	r2, r4
 8001bd0:	4629      	mov	r1, r5
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	f7ff ff93 	bl	8001afe <__sfputs_r>
 8001bd8:	3001      	adds	r0, #1
 8001bda:	f000 80aa 	beq.w	8001d32 <_vfiprintf_r+0x20e>
 8001bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001be0:	445a      	add	r2, fp
 8001be2:	9209      	str	r2, [sp, #36]	; 0x24
 8001be4:	f89a 3000 	ldrb.w	r3, [sl]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a2 	beq.w	8001d32 <_vfiprintf_r+0x20e>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001bf8:	f10a 0a01 	add.w	sl, sl, #1
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	9307      	str	r3, [sp, #28]
 8001c00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c04:	931a      	str	r3, [sp, #104]	; 0x68
 8001c06:	4654      	mov	r4, sl
 8001c08:	2205      	movs	r2, #5
 8001c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c0e:	4858      	ldr	r0, [pc, #352]	; (8001d70 <_vfiprintf_r+0x24c>)
 8001c10:	f7fe faee 	bl	80001f0 <memchr>
 8001c14:	9a04      	ldr	r2, [sp, #16]
 8001c16:	b9d8      	cbnz	r0, 8001c50 <_vfiprintf_r+0x12c>
 8001c18:	06d1      	lsls	r1, r2, #27
 8001c1a:	bf44      	itt	mi
 8001c1c:	2320      	movmi	r3, #32
 8001c1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c22:	0713      	lsls	r3, r2, #28
 8001c24:	bf44      	itt	mi
 8001c26:	232b      	movmi	r3, #43	; 0x2b
 8001c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8001c30:	2b2a      	cmp	r3, #42	; 0x2a
 8001c32:	d015      	beq.n	8001c60 <_vfiprintf_r+0x13c>
 8001c34:	9a07      	ldr	r2, [sp, #28]
 8001c36:	4654      	mov	r4, sl
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f04f 0c0a 	mov.w	ip, #10
 8001c3e:	4621      	mov	r1, r4
 8001c40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c44:	3b30      	subs	r3, #48	; 0x30
 8001c46:	2b09      	cmp	r3, #9
 8001c48:	d94e      	bls.n	8001ce8 <_vfiprintf_r+0x1c4>
 8001c4a:	b1b0      	cbz	r0, 8001c7a <_vfiprintf_r+0x156>
 8001c4c:	9207      	str	r2, [sp, #28]
 8001c4e:	e014      	b.n	8001c7a <_vfiprintf_r+0x156>
 8001c50:	eba0 0308 	sub.w	r3, r0, r8
 8001c54:	fa09 f303 	lsl.w	r3, r9, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	9304      	str	r3, [sp, #16]
 8001c5c:	46a2      	mov	sl, r4
 8001c5e:	e7d2      	b.n	8001c06 <_vfiprintf_r+0xe2>
 8001c60:	9b03      	ldr	r3, [sp, #12]
 8001c62:	1d19      	adds	r1, r3, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	9103      	str	r1, [sp, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	bfbb      	ittet	lt
 8001c6c:	425b      	neglt	r3, r3
 8001c6e:	f042 0202 	orrlt.w	r2, r2, #2
 8001c72:	9307      	strge	r3, [sp, #28]
 8001c74:	9307      	strlt	r3, [sp, #28]
 8001c76:	bfb8      	it	lt
 8001c78:	9204      	strlt	r2, [sp, #16]
 8001c7a:	7823      	ldrb	r3, [r4, #0]
 8001c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8001c7e:	d10c      	bne.n	8001c9a <_vfiprintf_r+0x176>
 8001c80:	7863      	ldrb	r3, [r4, #1]
 8001c82:	2b2a      	cmp	r3, #42	; 0x2a
 8001c84:	d135      	bne.n	8001cf2 <_vfiprintf_r+0x1ce>
 8001c86:	9b03      	ldr	r3, [sp, #12]
 8001c88:	1d1a      	adds	r2, r3, #4
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	9203      	str	r2, [sp, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	bfb8      	it	lt
 8001c92:	f04f 33ff 	movlt.w	r3, #4294967295
 8001c96:	3402      	adds	r4, #2
 8001c98:	9305      	str	r3, [sp, #20]
 8001c9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001d80 <_vfiprintf_r+0x25c>
 8001c9e:	7821      	ldrb	r1, [r4, #0]
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4650      	mov	r0, sl
 8001ca4:	f7fe faa4 	bl	80001f0 <memchr>
 8001ca8:	b140      	cbz	r0, 8001cbc <_vfiprintf_r+0x198>
 8001caa:	2340      	movs	r3, #64	; 0x40
 8001cac:	eba0 000a 	sub.w	r0, r0, sl
 8001cb0:	fa03 f000 	lsl.w	r0, r3, r0
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	3401      	adds	r4, #1
 8001cba:	9304      	str	r3, [sp, #16]
 8001cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cc0:	482c      	ldr	r0, [pc, #176]	; (8001d74 <_vfiprintf_r+0x250>)
 8001cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001cc6:	2206      	movs	r2, #6
 8001cc8:	f7fe fa92 	bl	80001f0 <memchr>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d03f      	beq.n	8001d50 <_vfiprintf_r+0x22c>
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <_vfiprintf_r+0x254>)
 8001cd2:	bb1b      	cbnz	r3, 8001d1c <_vfiprintf_r+0x1f8>
 8001cd4:	9b03      	ldr	r3, [sp, #12]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	f023 0307 	bic.w	r3, r3, #7
 8001cdc:	3308      	adds	r3, #8
 8001cde:	9303      	str	r3, [sp, #12]
 8001ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ce2:	443b      	add	r3, r7
 8001ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8001ce6:	e767      	b.n	8001bb8 <_vfiprintf_r+0x94>
 8001ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001cec:	460c      	mov	r4, r1
 8001cee:	2001      	movs	r0, #1
 8001cf0:	e7a5      	b.n	8001c3e <_vfiprintf_r+0x11a>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	3401      	adds	r4, #1
 8001cf6:	9305      	str	r3, [sp, #20]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f04f 0c0a 	mov.w	ip, #10
 8001cfe:	4620      	mov	r0, r4
 8001d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d04:	3a30      	subs	r2, #48	; 0x30
 8001d06:	2a09      	cmp	r2, #9
 8001d08:	d903      	bls.n	8001d12 <_vfiprintf_r+0x1ee>
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0c5      	beq.n	8001c9a <_vfiprintf_r+0x176>
 8001d0e:	9105      	str	r1, [sp, #20]
 8001d10:	e7c3      	b.n	8001c9a <_vfiprintf_r+0x176>
 8001d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d16:	4604      	mov	r4, r0
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e7f0      	b.n	8001cfe <_vfiprintf_r+0x1da>
 8001d1c:	ab03      	add	r3, sp, #12
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	462a      	mov	r2, r5
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <_vfiprintf_r+0x258>)
 8001d24:	a904      	add	r1, sp, #16
 8001d26:	4630      	mov	r0, r6
 8001d28:	f3af 8000 	nop.w
 8001d2c:	4607      	mov	r7, r0
 8001d2e:	1c78      	adds	r0, r7, #1
 8001d30:	d1d6      	bne.n	8001ce0 <_vfiprintf_r+0x1bc>
 8001d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d34:	07d9      	lsls	r1, r3, #31
 8001d36:	d405      	bmi.n	8001d44 <_vfiprintf_r+0x220>
 8001d38:	89ab      	ldrh	r3, [r5, #12]
 8001d3a:	059a      	lsls	r2, r3, #22
 8001d3c:	d402      	bmi.n	8001d44 <_vfiprintf_r+0x220>
 8001d3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d40:	f7ff fdb7 	bl	80018b2 <__retarget_lock_release_recursive>
 8001d44:	89ab      	ldrh	r3, [r5, #12]
 8001d46:	065b      	lsls	r3, r3, #25
 8001d48:	f53f af12 	bmi.w	8001b70 <_vfiprintf_r+0x4c>
 8001d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001d4e:	e711      	b.n	8001b74 <_vfiprintf_r+0x50>
 8001d50:	ab03      	add	r3, sp, #12
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	462a      	mov	r2, r5
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <_vfiprintf_r+0x258>)
 8001d58:	a904      	add	r1, sp, #16
 8001d5a:	4630      	mov	r0, r6
 8001d5c:	f000 f880 	bl	8001e60 <_printf_i>
 8001d60:	e7e4      	b.n	8001d2c <_vfiprintf_r+0x208>
 8001d62:	bf00      	nop
 8001d64:	080023c0 	.word	0x080023c0
 8001d68:	080023e0 	.word	0x080023e0
 8001d6c:	080023a0 	.word	0x080023a0
 8001d70:	08002400 	.word	0x08002400
 8001d74:	0800240a 	.word	0x0800240a
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	08001aff 	.word	0x08001aff
 8001d80:	08002406 	.word	0x08002406

08001d84 <_printf_common>:
 8001d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d88:	4616      	mov	r6, r2
 8001d8a:	4699      	mov	r9, r3
 8001d8c:	688a      	ldr	r2, [r1, #8]
 8001d8e:	690b      	ldr	r3, [r1, #16]
 8001d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d94:	4293      	cmp	r3, r2
 8001d96:	bfb8      	it	lt
 8001d98:	4613      	movlt	r3, r2
 8001d9a:	6033      	str	r3, [r6, #0]
 8001d9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001da0:	4607      	mov	r7, r0
 8001da2:	460c      	mov	r4, r1
 8001da4:	b10a      	cbz	r2, 8001daa <_printf_common+0x26>
 8001da6:	3301      	adds	r3, #1
 8001da8:	6033      	str	r3, [r6, #0]
 8001daa:	6823      	ldr	r3, [r4, #0]
 8001dac:	0699      	lsls	r1, r3, #26
 8001dae:	bf42      	ittt	mi
 8001db0:	6833      	ldrmi	r3, [r6, #0]
 8001db2:	3302      	addmi	r3, #2
 8001db4:	6033      	strmi	r3, [r6, #0]
 8001db6:	6825      	ldr	r5, [r4, #0]
 8001db8:	f015 0506 	ands.w	r5, r5, #6
 8001dbc:	d106      	bne.n	8001dcc <_printf_common+0x48>
 8001dbe:	f104 0a19 	add.w	sl, r4, #25
 8001dc2:	68e3      	ldr	r3, [r4, #12]
 8001dc4:	6832      	ldr	r2, [r6, #0]
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	42ab      	cmp	r3, r5
 8001dca:	dc26      	bgt.n	8001e1a <_printf_common+0x96>
 8001dcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001dd0:	1e13      	subs	r3, r2, #0
 8001dd2:	6822      	ldr	r2, [r4, #0]
 8001dd4:	bf18      	it	ne
 8001dd6:	2301      	movne	r3, #1
 8001dd8:	0692      	lsls	r2, r2, #26
 8001dda:	d42b      	bmi.n	8001e34 <_printf_common+0xb0>
 8001ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001de0:	4649      	mov	r1, r9
 8001de2:	4638      	mov	r0, r7
 8001de4:	47c0      	blx	r8
 8001de6:	3001      	adds	r0, #1
 8001de8:	d01e      	beq.n	8001e28 <_printf_common+0xa4>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	68e5      	ldr	r5, [r4, #12]
 8001dee:	6832      	ldr	r2, [r6, #0]
 8001df0:	f003 0306 	and.w	r3, r3, #6
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	bf08      	it	eq
 8001df8:	1aad      	subeq	r5, r5, r2
 8001dfa:	68a3      	ldr	r3, [r4, #8]
 8001dfc:	6922      	ldr	r2, [r4, #16]
 8001dfe:	bf0c      	ite	eq
 8001e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e04:	2500      	movne	r5, #0
 8001e06:	4293      	cmp	r3, r2
 8001e08:	bfc4      	itt	gt
 8001e0a:	1a9b      	subgt	r3, r3, r2
 8001e0c:	18ed      	addgt	r5, r5, r3
 8001e0e:	2600      	movs	r6, #0
 8001e10:	341a      	adds	r4, #26
 8001e12:	42b5      	cmp	r5, r6
 8001e14:	d11a      	bne.n	8001e4c <_printf_common+0xc8>
 8001e16:	2000      	movs	r0, #0
 8001e18:	e008      	b.n	8001e2c <_printf_common+0xa8>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	4652      	mov	r2, sl
 8001e1e:	4649      	mov	r1, r9
 8001e20:	4638      	mov	r0, r7
 8001e22:	47c0      	blx	r8
 8001e24:	3001      	adds	r0, #1
 8001e26:	d103      	bne.n	8001e30 <_printf_common+0xac>
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e30:	3501      	adds	r5, #1
 8001e32:	e7c6      	b.n	8001dc2 <_printf_common+0x3e>
 8001e34:	18e1      	adds	r1, r4, r3
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	2030      	movs	r0, #48	; 0x30
 8001e3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001e3e:	4422      	add	r2, r4
 8001e40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001e44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001e48:	3302      	adds	r3, #2
 8001e4a:	e7c7      	b.n	8001ddc <_printf_common+0x58>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	4622      	mov	r2, r4
 8001e50:	4649      	mov	r1, r9
 8001e52:	4638      	mov	r0, r7
 8001e54:	47c0      	blx	r8
 8001e56:	3001      	adds	r0, #1
 8001e58:	d0e6      	beq.n	8001e28 <_printf_common+0xa4>
 8001e5a:	3601      	adds	r6, #1
 8001e5c:	e7d9      	b.n	8001e12 <_printf_common+0x8e>
	...

08001e60 <_printf_i>:
 8001e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	460c      	mov	r4, r1
 8001e66:	4691      	mov	r9, r2
 8001e68:	7e27      	ldrb	r7, [r4, #24]
 8001e6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e6c:	2f78      	cmp	r7, #120	; 0x78
 8001e6e:	4680      	mov	r8, r0
 8001e70:	469a      	mov	sl, r3
 8001e72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e76:	d807      	bhi.n	8001e88 <_printf_i+0x28>
 8001e78:	2f62      	cmp	r7, #98	; 0x62
 8001e7a:	d80a      	bhi.n	8001e92 <_printf_i+0x32>
 8001e7c:	2f00      	cmp	r7, #0
 8001e7e:	f000 80d8 	beq.w	8002032 <_printf_i+0x1d2>
 8001e82:	2f58      	cmp	r7, #88	; 0x58
 8001e84:	f000 80a3 	beq.w	8001fce <_printf_i+0x16e>
 8001e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001e90:	e03a      	b.n	8001f08 <_printf_i+0xa8>
 8001e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001e96:	2b15      	cmp	r3, #21
 8001e98:	d8f6      	bhi.n	8001e88 <_printf_i+0x28>
 8001e9a:	a001      	add	r0, pc, #4	; (adr r0, 8001ea0 <_printf_i+0x40>)
 8001e9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001ea0:	08001ef9 	.word	0x08001ef9
 8001ea4:	08001f0d 	.word	0x08001f0d
 8001ea8:	08001e89 	.word	0x08001e89
 8001eac:	08001e89 	.word	0x08001e89
 8001eb0:	08001e89 	.word	0x08001e89
 8001eb4:	08001e89 	.word	0x08001e89
 8001eb8:	08001f0d 	.word	0x08001f0d
 8001ebc:	08001e89 	.word	0x08001e89
 8001ec0:	08001e89 	.word	0x08001e89
 8001ec4:	08001e89 	.word	0x08001e89
 8001ec8:	08001e89 	.word	0x08001e89
 8001ecc:	08002019 	.word	0x08002019
 8001ed0:	08001f3d 	.word	0x08001f3d
 8001ed4:	08001ffb 	.word	0x08001ffb
 8001ed8:	08001e89 	.word	0x08001e89
 8001edc:	08001e89 	.word	0x08001e89
 8001ee0:	0800203b 	.word	0x0800203b
 8001ee4:	08001e89 	.word	0x08001e89
 8001ee8:	08001f3d 	.word	0x08001f3d
 8001eec:	08001e89 	.word	0x08001e89
 8001ef0:	08001e89 	.word	0x08001e89
 8001ef4:	08002003 	.word	0x08002003
 8001ef8:	680b      	ldr	r3, [r1, #0]
 8001efa:	1d1a      	adds	r2, r3, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	600a      	str	r2, [r1, #0]
 8001f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0a3      	b.n	8002054 <_printf_i+0x1f4>
 8001f0c:	6825      	ldr	r5, [r4, #0]
 8001f0e:	6808      	ldr	r0, [r1, #0]
 8001f10:	062e      	lsls	r6, r5, #24
 8001f12:	f100 0304 	add.w	r3, r0, #4
 8001f16:	d50a      	bpl.n	8001f2e <_printf_i+0xce>
 8001f18:	6805      	ldr	r5, [r0, #0]
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	2d00      	cmp	r5, #0
 8001f1e:	da03      	bge.n	8001f28 <_printf_i+0xc8>
 8001f20:	232d      	movs	r3, #45	; 0x2d
 8001f22:	426d      	negs	r5, r5
 8001f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f28:	485e      	ldr	r0, [pc, #376]	; (80020a4 <_printf_i+0x244>)
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e019      	b.n	8001f62 <_printf_i+0x102>
 8001f2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001f32:	6805      	ldr	r5, [r0, #0]
 8001f34:	600b      	str	r3, [r1, #0]
 8001f36:	bf18      	it	ne
 8001f38:	b22d      	sxthne	r5, r5
 8001f3a:	e7ef      	b.n	8001f1c <_printf_i+0xbc>
 8001f3c:	680b      	ldr	r3, [r1, #0]
 8001f3e:	6825      	ldr	r5, [r4, #0]
 8001f40:	1d18      	adds	r0, r3, #4
 8001f42:	6008      	str	r0, [r1, #0]
 8001f44:	0628      	lsls	r0, r5, #24
 8001f46:	d501      	bpl.n	8001f4c <_printf_i+0xec>
 8001f48:	681d      	ldr	r5, [r3, #0]
 8001f4a:	e002      	b.n	8001f52 <_printf_i+0xf2>
 8001f4c:	0669      	lsls	r1, r5, #25
 8001f4e:	d5fb      	bpl.n	8001f48 <_printf_i+0xe8>
 8001f50:	881d      	ldrh	r5, [r3, #0]
 8001f52:	4854      	ldr	r0, [pc, #336]	; (80020a4 <_printf_i+0x244>)
 8001f54:	2f6f      	cmp	r7, #111	; 0x6f
 8001f56:	bf0c      	ite	eq
 8001f58:	2308      	moveq	r3, #8
 8001f5a:	230a      	movne	r3, #10
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001f62:	6866      	ldr	r6, [r4, #4]
 8001f64:	60a6      	str	r6, [r4, #8]
 8001f66:	2e00      	cmp	r6, #0
 8001f68:	bfa2      	ittt	ge
 8001f6a:	6821      	ldrge	r1, [r4, #0]
 8001f6c:	f021 0104 	bicge.w	r1, r1, #4
 8001f70:	6021      	strge	r1, [r4, #0]
 8001f72:	b90d      	cbnz	r5, 8001f78 <_printf_i+0x118>
 8001f74:	2e00      	cmp	r6, #0
 8001f76:	d04d      	beq.n	8002014 <_printf_i+0x1b4>
 8001f78:	4616      	mov	r6, r2
 8001f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8001f82:	5dc7      	ldrb	r7, [r0, r7]
 8001f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f88:	462f      	mov	r7, r5
 8001f8a:	42bb      	cmp	r3, r7
 8001f8c:	460d      	mov	r5, r1
 8001f8e:	d9f4      	bls.n	8001f7a <_printf_i+0x11a>
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d10b      	bne.n	8001fac <_printf_i+0x14c>
 8001f94:	6823      	ldr	r3, [r4, #0]
 8001f96:	07df      	lsls	r7, r3, #31
 8001f98:	d508      	bpl.n	8001fac <_printf_i+0x14c>
 8001f9a:	6923      	ldr	r3, [r4, #16]
 8001f9c:	6861      	ldr	r1, [r4, #4]
 8001f9e:	4299      	cmp	r1, r3
 8001fa0:	bfde      	ittt	le
 8001fa2:	2330      	movle	r3, #48	; 0x30
 8001fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001fac:	1b92      	subs	r2, r2, r6
 8001fae:	6122      	str	r2, [r4, #16]
 8001fb0:	f8cd a000 	str.w	sl, [sp]
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	aa03      	add	r2, sp, #12
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4640      	mov	r0, r8
 8001fbc:	f7ff fee2 	bl	8001d84 <_printf_common>
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d14c      	bne.n	800205e <_printf_i+0x1fe>
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	b004      	add	sp, #16
 8001fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fce:	4835      	ldr	r0, [pc, #212]	; (80020a4 <_printf_i+0x244>)
 8001fd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	680e      	ldr	r6, [r1, #0]
 8001fd8:	061f      	lsls	r7, r3, #24
 8001fda:	f856 5b04 	ldr.w	r5, [r6], #4
 8001fde:	600e      	str	r6, [r1, #0]
 8001fe0:	d514      	bpl.n	800200c <_printf_i+0x1ac>
 8001fe2:	07d9      	lsls	r1, r3, #31
 8001fe4:	bf44      	itt	mi
 8001fe6:	f043 0320 	orrmi.w	r3, r3, #32
 8001fea:	6023      	strmi	r3, [r4, #0]
 8001fec:	b91d      	cbnz	r5, 8001ff6 <_printf_i+0x196>
 8001fee:	6823      	ldr	r3, [r4, #0]
 8001ff0:	f023 0320 	bic.w	r3, r3, #32
 8001ff4:	6023      	str	r3, [r4, #0]
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	e7b0      	b.n	8001f5c <_printf_i+0xfc>
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6023      	str	r3, [r4, #0]
 8002002:	2378      	movs	r3, #120	; 0x78
 8002004:	4828      	ldr	r0, [pc, #160]	; (80020a8 <_printf_i+0x248>)
 8002006:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800200a:	e7e3      	b.n	8001fd4 <_printf_i+0x174>
 800200c:	065e      	lsls	r6, r3, #25
 800200e:	bf48      	it	mi
 8002010:	b2ad      	uxthmi	r5, r5
 8002012:	e7e6      	b.n	8001fe2 <_printf_i+0x182>
 8002014:	4616      	mov	r6, r2
 8002016:	e7bb      	b.n	8001f90 <_printf_i+0x130>
 8002018:	680b      	ldr	r3, [r1, #0]
 800201a:	6826      	ldr	r6, [r4, #0]
 800201c:	6960      	ldr	r0, [r4, #20]
 800201e:	1d1d      	adds	r5, r3, #4
 8002020:	600d      	str	r5, [r1, #0]
 8002022:	0635      	lsls	r5, r6, #24
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	d501      	bpl.n	800202c <_printf_i+0x1cc>
 8002028:	6018      	str	r0, [r3, #0]
 800202a:	e002      	b.n	8002032 <_printf_i+0x1d2>
 800202c:	0671      	lsls	r1, r6, #25
 800202e:	d5fb      	bpl.n	8002028 <_printf_i+0x1c8>
 8002030:	8018      	strh	r0, [r3, #0]
 8002032:	2300      	movs	r3, #0
 8002034:	6123      	str	r3, [r4, #16]
 8002036:	4616      	mov	r6, r2
 8002038:	e7ba      	b.n	8001fb0 <_printf_i+0x150>
 800203a:	680b      	ldr	r3, [r1, #0]
 800203c:	1d1a      	adds	r2, r3, #4
 800203e:	600a      	str	r2, [r1, #0]
 8002040:	681e      	ldr	r6, [r3, #0]
 8002042:	6862      	ldr	r2, [r4, #4]
 8002044:	2100      	movs	r1, #0
 8002046:	4630      	mov	r0, r6
 8002048:	f7fe f8d2 	bl	80001f0 <memchr>
 800204c:	b108      	cbz	r0, 8002052 <_printf_i+0x1f2>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	6060      	str	r0, [r4, #4]
 8002052:	6863      	ldr	r3, [r4, #4]
 8002054:	6123      	str	r3, [r4, #16]
 8002056:	2300      	movs	r3, #0
 8002058:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800205c:	e7a8      	b.n	8001fb0 <_printf_i+0x150>
 800205e:	6923      	ldr	r3, [r4, #16]
 8002060:	4632      	mov	r2, r6
 8002062:	4649      	mov	r1, r9
 8002064:	4640      	mov	r0, r8
 8002066:	47d0      	blx	sl
 8002068:	3001      	adds	r0, #1
 800206a:	d0ab      	beq.n	8001fc4 <_printf_i+0x164>
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	079b      	lsls	r3, r3, #30
 8002070:	d413      	bmi.n	800209a <_printf_i+0x23a>
 8002072:	68e0      	ldr	r0, [r4, #12]
 8002074:	9b03      	ldr	r3, [sp, #12]
 8002076:	4298      	cmp	r0, r3
 8002078:	bfb8      	it	lt
 800207a:	4618      	movlt	r0, r3
 800207c:	e7a4      	b.n	8001fc8 <_printf_i+0x168>
 800207e:	2301      	movs	r3, #1
 8002080:	4632      	mov	r2, r6
 8002082:	4649      	mov	r1, r9
 8002084:	4640      	mov	r0, r8
 8002086:	47d0      	blx	sl
 8002088:	3001      	adds	r0, #1
 800208a:	d09b      	beq.n	8001fc4 <_printf_i+0x164>
 800208c:	3501      	adds	r5, #1
 800208e:	68e3      	ldr	r3, [r4, #12]
 8002090:	9903      	ldr	r1, [sp, #12]
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	42ab      	cmp	r3, r5
 8002096:	dcf2      	bgt.n	800207e <_printf_i+0x21e>
 8002098:	e7eb      	b.n	8002072 <_printf_i+0x212>
 800209a:	2500      	movs	r5, #0
 800209c:	f104 0619 	add.w	r6, r4, #25
 80020a0:	e7f5      	b.n	800208e <_printf_i+0x22e>
 80020a2:	bf00      	nop
 80020a4:	08002411 	.word	0x08002411
 80020a8:	08002422 	.word	0x08002422

080020ac <_sbrk_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4d06      	ldr	r5, [pc, #24]	; (80020c8 <_sbrk_r+0x1c>)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4604      	mov	r4, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	602b      	str	r3, [r5, #0]
 80020b8:	f000 f8e8 	bl	800228c <_sbrk>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_sbrk_r+0x1a>
 80020c0:	682b      	ldr	r3, [r5, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_sbrk_r+0x1a>
 80020c4:	6023      	str	r3, [r4, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	200000d8 	.word	0x200000d8

080020cc <__sread>:
 80020cc:	b510      	push	{r4, lr}
 80020ce:	460c      	mov	r4, r1
 80020d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020d4:	f000 f8a0 	bl	8002218 <_read_r>
 80020d8:	2800      	cmp	r0, #0
 80020da:	bfab      	itete	ge
 80020dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020de:	89a3      	ldrhlt	r3, [r4, #12]
 80020e0:	181b      	addge	r3, r3, r0
 80020e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020e6:	bfac      	ite	ge
 80020e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80020ea:	81a3      	strhlt	r3, [r4, #12]
 80020ec:	bd10      	pop	{r4, pc}

080020ee <__swrite>:
 80020ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020f2:	461f      	mov	r7, r3
 80020f4:	898b      	ldrh	r3, [r1, #12]
 80020f6:	05db      	lsls	r3, r3, #23
 80020f8:	4605      	mov	r5, r0
 80020fa:	460c      	mov	r4, r1
 80020fc:	4616      	mov	r6, r2
 80020fe:	d505      	bpl.n	800210c <__swrite+0x1e>
 8002100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002104:	2302      	movs	r3, #2
 8002106:	2200      	movs	r2, #0
 8002108:	f000 f868 	bl	80021dc <_lseek_r>
 800210c:	89a3      	ldrh	r3, [r4, #12]
 800210e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002112:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002116:	81a3      	strh	r3, [r4, #12]
 8002118:	4632      	mov	r2, r6
 800211a:	463b      	mov	r3, r7
 800211c:	4628      	mov	r0, r5
 800211e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002122:	f000 b817 	b.w	8002154 <_write_r>

08002126 <__sseek>:
 8002126:	b510      	push	{r4, lr}
 8002128:	460c      	mov	r4, r1
 800212a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800212e:	f000 f855 	bl	80021dc <_lseek_r>
 8002132:	1c43      	adds	r3, r0, #1
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	bf15      	itete	ne
 8002138:	6560      	strne	r0, [r4, #84]	; 0x54
 800213a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800213e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002142:	81a3      	strheq	r3, [r4, #12]
 8002144:	bf18      	it	ne
 8002146:	81a3      	strhne	r3, [r4, #12]
 8002148:	bd10      	pop	{r4, pc}

0800214a <__sclose>:
 800214a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800214e:	f000 b813 	b.w	8002178 <_close_r>
	...

08002154 <_write_r>:
 8002154:	b538      	push	{r3, r4, r5, lr}
 8002156:	4d07      	ldr	r5, [pc, #28]	; (8002174 <_write_r+0x20>)
 8002158:	4604      	mov	r4, r0
 800215a:	4608      	mov	r0, r1
 800215c:	4611      	mov	r1, r2
 800215e:	2200      	movs	r2, #0
 8002160:	602a      	str	r2, [r5, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f000 f8a0 	bl	80022a8 <_write>
 8002168:	1c43      	adds	r3, r0, #1
 800216a:	d102      	bne.n	8002172 <_write_r+0x1e>
 800216c:	682b      	ldr	r3, [r5, #0]
 800216e:	b103      	cbz	r3, 8002172 <_write_r+0x1e>
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	bd38      	pop	{r3, r4, r5, pc}
 8002174:	200000d8 	.word	0x200000d8

08002178 <_close_r>:
 8002178:	b538      	push	{r3, r4, r5, lr}
 800217a:	4d06      	ldr	r5, [pc, #24]	; (8002194 <_close_r+0x1c>)
 800217c:	2300      	movs	r3, #0
 800217e:	4604      	mov	r4, r0
 8002180:	4608      	mov	r0, r1
 8002182:	602b      	str	r3, [r5, #0]
 8002184:	f000 f85a 	bl	800223c <_close>
 8002188:	1c43      	adds	r3, r0, #1
 800218a:	d102      	bne.n	8002192 <_close_r+0x1a>
 800218c:	682b      	ldr	r3, [r5, #0]
 800218e:	b103      	cbz	r3, 8002192 <_close_r+0x1a>
 8002190:	6023      	str	r3, [r4, #0]
 8002192:	bd38      	pop	{r3, r4, r5, pc}
 8002194:	200000d8 	.word	0x200000d8

08002198 <_fstat_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	4d07      	ldr	r5, [pc, #28]	; (80021b8 <_fstat_r+0x20>)
 800219c:	2300      	movs	r3, #0
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	4611      	mov	r1, r2
 80021a4:	602b      	str	r3, [r5, #0]
 80021a6:	f000 f851 	bl	800224c <_fstat>
 80021aa:	1c43      	adds	r3, r0, #1
 80021ac:	d102      	bne.n	80021b4 <_fstat_r+0x1c>
 80021ae:	682b      	ldr	r3, [r5, #0]
 80021b0:	b103      	cbz	r3, 80021b4 <_fstat_r+0x1c>
 80021b2:	6023      	str	r3, [r4, #0]
 80021b4:	bd38      	pop	{r3, r4, r5, pc}
 80021b6:	bf00      	nop
 80021b8:	200000d8 	.word	0x200000d8

080021bc <_isatty_r>:
 80021bc:	b538      	push	{r3, r4, r5, lr}
 80021be:	4d06      	ldr	r5, [pc, #24]	; (80021d8 <_isatty_r+0x1c>)
 80021c0:	2300      	movs	r3, #0
 80021c2:	4604      	mov	r4, r0
 80021c4:	4608      	mov	r0, r1
 80021c6:	602b      	str	r3, [r5, #0]
 80021c8:	f000 f848 	bl	800225c <_isatty>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_isatty_r+0x1a>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_isatty_r+0x1a>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	200000d8 	.word	0x200000d8

080021dc <_lseek_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4d07      	ldr	r5, [pc, #28]	; (80021fc <_lseek_r+0x20>)
 80021e0:	4604      	mov	r4, r0
 80021e2:	4608      	mov	r0, r1
 80021e4:	4611      	mov	r1, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	602a      	str	r2, [r5, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f000 f83e 	bl	800226c <_lseek>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d102      	bne.n	80021fa <_lseek_r+0x1e>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	b103      	cbz	r3, 80021fa <_lseek_r+0x1e>
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	200000d8 	.word	0x200000d8

08002200 <__malloc_lock>:
 8002200:	4801      	ldr	r0, [pc, #4]	; (8002208 <__malloc_lock+0x8>)
 8002202:	f7ff bb55 	b.w	80018b0 <__retarget_lock_acquire_recursive>
 8002206:	bf00      	nop
 8002208:	200000d0 	.word	0x200000d0

0800220c <__malloc_unlock>:
 800220c:	4801      	ldr	r0, [pc, #4]	; (8002214 <__malloc_unlock+0x8>)
 800220e:	f7ff bb50 	b.w	80018b2 <__retarget_lock_release_recursive>
 8002212:	bf00      	nop
 8002214:	200000d0 	.word	0x200000d0

08002218 <_read_r>:
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4d07      	ldr	r5, [pc, #28]	; (8002238 <_read_r+0x20>)
 800221c:	4604      	mov	r4, r0
 800221e:	4608      	mov	r0, r1
 8002220:	4611      	mov	r1, r2
 8002222:	2200      	movs	r2, #0
 8002224:	602a      	str	r2, [r5, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	f000 f828 	bl	800227c <_read>
 800222c:	1c43      	adds	r3, r0, #1
 800222e:	d102      	bne.n	8002236 <_read_r+0x1e>
 8002230:	682b      	ldr	r3, [r5, #0]
 8002232:	b103      	cbz	r3, 8002236 <_read_r+0x1e>
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	bd38      	pop	{r3, r4, r5, pc}
 8002238:	200000d8 	.word	0x200000d8

0800223c <_close>:
 800223c:	4b02      	ldr	r3, [pc, #8]	; (8002248 <_close+0xc>)
 800223e:	2258      	movs	r2, #88	; 0x58
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	f04f 30ff 	mov.w	r0, #4294967295
 8002246:	4770      	bx	lr
 8002248:	200000d8 	.word	0x200000d8

0800224c <_fstat>:
 800224c:	4b02      	ldr	r3, [pc, #8]	; (8002258 <_fstat+0xc>)
 800224e:	2258      	movs	r2, #88	; 0x58
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	f04f 30ff 	mov.w	r0, #4294967295
 8002256:	4770      	bx	lr
 8002258:	200000d8 	.word	0x200000d8

0800225c <_isatty>:
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <_isatty+0xc>)
 800225e:	2258      	movs	r2, #88	; 0x58
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	2000      	movs	r0, #0
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	200000d8 	.word	0x200000d8

0800226c <_lseek>:
 800226c:	4b02      	ldr	r3, [pc, #8]	; (8002278 <_lseek+0xc>)
 800226e:	2258      	movs	r2, #88	; 0x58
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f04f 30ff 	mov.w	r0, #4294967295
 8002276:	4770      	bx	lr
 8002278:	200000d8 	.word	0x200000d8

0800227c <_read>:
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <_read+0xc>)
 800227e:	2258      	movs	r2, #88	; 0x58
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	4770      	bx	lr
 8002288:	200000d8 	.word	0x200000d8

0800228c <_sbrk>:
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <_sbrk+0x14>)
 800228e:	6819      	ldr	r1, [r3, #0]
 8002290:	4602      	mov	r2, r0
 8002292:	b909      	cbnz	r1, 8002298 <_sbrk+0xc>
 8002294:	4903      	ldr	r1, [pc, #12]	; (80022a4 <_sbrk+0x18>)
 8002296:	6019      	str	r1, [r3, #0]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	4402      	add	r2, r0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	4770      	bx	lr
 80022a0:	2000009c 	.word	0x2000009c
 80022a4:	200000e0 	.word	0x200000e0

080022a8 <_write>:
 80022a8:	4b02      	ldr	r3, [pc, #8]	; (80022b4 <_write+0xc>)
 80022aa:	2258      	movs	r2, #88	; 0x58
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f04f 30ff 	mov.w	r0, #4294967295
 80022b2:	4770      	bx	lr
 80022b4:	200000d8 	.word	0x200000d8

080022b8 <_init>:
 80022b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ba:	bf00      	nop
 80022bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022be:	bc08      	pop	{r3}
 80022c0:	469e      	mov	lr, r3
 80022c2:	4770      	bx	lr

080022c4 <_fini>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr
